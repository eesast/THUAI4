// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message2Client.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Message2Client_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Message2Client_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "MessageType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message2Client_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Message2Client_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message2Client_2eproto;
namespace Protobuf {
class GameObjInfo;
class GameObjInfoDefaultTypeInternal;
extern GameObjInfoDefaultTypeInternal _GameObjInfo_default_instance_;
class MessageToClient;
class MessageToClientDefaultTypeInternal;
extern MessageToClientDefaultTypeInternal _MessageToClient_default_instance_;
class MessageToClient_OneDimVec;
class MessageToClient_OneDimVecDefaultTypeInternal;
extern MessageToClient_OneDimVecDefaultTypeInternal _MessageToClient_OneDimVec_default_instance_;
class MessageToClient_OneTeamGUIDs;
class MessageToClient_OneTeamGUIDsDefaultTypeInternal;
extern MessageToClient_OneTeamGUIDsDefaultTypeInternal _MessageToClient_OneTeamGUIDs_default_instance_;
class MessageToOneClient;
class MessageToOneClientDefaultTypeInternal;
extern MessageToOneClientDefaultTypeInternal _MessageToOneClient_default_instance_;
}  // namespace Protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::Protobuf::GameObjInfo* Arena::CreateMaybeMessage<::Protobuf::GameObjInfo>(Arena*);
template<> ::Protobuf::MessageToClient* Arena::CreateMaybeMessage<::Protobuf::MessageToClient>(Arena*);
template<> ::Protobuf::MessageToClient_OneDimVec* Arena::CreateMaybeMessage<::Protobuf::MessageToClient_OneDimVec>(Arena*);
template<> ::Protobuf::MessageToClient_OneTeamGUIDs* Arena::CreateMaybeMessage<::Protobuf::MessageToClient_OneTeamGUIDs>(Arena*);
template<> ::Protobuf::MessageToOneClient* Arena::CreateMaybeMessage<::Protobuf::MessageToOneClient>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protobuf {

enum GameObjType : int {
  Character = 0,
  Wall = 1,
  Prop = 2,
  Bullet = 3,
  BirthPoint = 4,
  OutOfBoundBlock = 5,
  GameObjType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GameObjType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GameObjType_IsValid(int value);
constexpr GameObjType GameObjType_MIN = Character;
constexpr GameObjType GameObjType_MAX = OutOfBoundBlock;
constexpr int GameObjType_ARRAYSIZE = GameObjType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameObjType_descriptor();
template<typename T>
inline const std::string& GameObjType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameObjType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameObjType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameObjType_descriptor(), enum_t_value);
}
inline bool GameObjType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GameObjType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameObjType>(
    GameObjType_descriptor(), name, value);
}
enum PropType : int {
  Null = 0,
  Bike = 1,
  Amplifier = 2,
  JinKeLa = 3,
  Rice = 4,
  NegativeFeedback = 5,
  Totem = 6,
  Phaser = 7,
  Dirt = 8,
  Attenuator = 9,
  Divider = 10,
  PropType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PropType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PropType_IsValid(int value);
constexpr PropType PropType_MIN = Null;
constexpr PropType PropType_MAX = Divider;
constexpr int PropType_ARRAYSIZE = PropType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropType_descriptor();
template<typename T>
inline const std::string& PropType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PropType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PropType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PropType_descriptor(), enum_t_value);
}
inline bool PropType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PropType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PropType>(
    PropType_descriptor(), name, value);
}
enum ShapeType : int {
  Circle = 0,
  Square = 1,
  ShapeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ShapeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ShapeType_IsValid(int value);
constexpr ShapeType ShapeType_MIN = Circle;
constexpr ShapeType ShapeType_MAX = Square;
constexpr int ShapeType_ARRAYSIZE = ShapeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShapeType_descriptor();
template<typename T>
inline const std::string& ShapeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ShapeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ShapeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ShapeType_descriptor(), enum_t_value);
}
inline bool ShapeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ShapeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShapeType>(
    ShapeType_descriptor(), name, value);
}
enum JobType : int {
  Job0 = 0,
  Job1 = 1,
  Job2 = 2,
  Job3 = 3,
  Job4 = 4,
  Job5 = 5,
  Job6 = 6,
  JobType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  JobType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool JobType_IsValid(int value);
constexpr JobType JobType_MIN = Job0;
constexpr JobType JobType_MAX = Job6;
constexpr int JobType_ARRAYSIZE = JobType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobType_descriptor();
template<typename T>
inline const std::string& JobType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JobType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JobType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JobType_descriptor(), enum_t_value);
}
inline bool JobType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, JobType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JobType>(
    JobType_descriptor(), name, value);
}
enum BulletType : int {
  Bullet0 = 0,
  Bullet1 = 1,
  Bullet2 = 2,
  Bullet3 = 3,
  Bullet4 = 4,
  Bullet5 = 5,
  Bullet6 = 6,
  BulletType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BulletType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BulletType_IsValid(int value);
constexpr BulletType BulletType_MIN = Bullet0;
constexpr BulletType BulletType_MAX = Bullet6;
constexpr int BulletType_ARRAYSIZE = BulletType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BulletType_descriptor();
template<typename T>
inline const std::string& BulletType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BulletType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BulletType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BulletType_descriptor(), enum_t_value);
}
inline bool BulletType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BulletType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BulletType>(
    BulletType_descriptor(), name, value);
}
enum ColorType : int {
  None = 0,
  Color1 = 1,
  Color2 = 2,
  Color3 = 3,
  Color4 = 4,
  ColorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ColorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ColorType_IsValid(int value);
constexpr ColorType ColorType_MIN = None;
constexpr ColorType ColorType_MAX = Color4;
constexpr int ColorType_ARRAYSIZE = ColorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ColorType_descriptor();
template<typename T>
inline const std::string& ColorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ColorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ColorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ColorType_descriptor(), enum_t_value);
}
inline bool ColorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ColorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ColorType>(
    ColorType_descriptor(), name, value);
}
// ===================================================================

class GameObjInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protobuf.GameObjInfo) */ {
 public:
  inline GameObjInfo() : GameObjInfo(nullptr) {}
  virtual ~GameObjInfo();

  GameObjInfo(const GameObjInfo& from);
  GameObjInfo(GameObjInfo&& from) noexcept
    : GameObjInfo() {
    *this = ::std::move(from);
  }

  inline GameObjInfo& operator=(const GameObjInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameObjInfo& operator=(GameObjInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameObjInfo& default_instance();

  static inline const GameObjInfo* internal_default_instance() {
    return reinterpret_cast<const GameObjInfo*>(
               &_GameObjInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameObjInfo& a, GameObjInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GameObjInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameObjInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameObjInfo* New() const final {
    return CreateMaybeMessage<GameObjInfo>(nullptr);
  }

  GameObjInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameObjInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameObjInfo& from);
  void MergeFrom(const GameObjInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameObjInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protobuf.GameObjInfo";
  }
  protected:
  explicit GameObjInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Message2Client_2eproto);
    return ::descriptor_table_Message2Client_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuidFieldNumber = 2,
    kGameObjTypeFieldNumber = 1,
    kXFieldNumber = 3,
    kFacingDirectionFieldNumber = 5,
    kYFieldNumber = 4,
    kMoveSpeedFieldNumber = 6,
    kShapeTypeFieldNumber = 9,
    kRadiusFieldNumber = 10,
    kTeamIDFieldNumber = 11,
    kCanMoveFieldNumber = 7,
    kIsMovingFieldNumber = 8,
    kIsLaidFieldNumber = 15,
    kIsDyingFieldNumber = 16,
    kApFieldNumber = 12,
    kBulletTypeFieldNumber = 13,
    kPropTypeFieldNumber = 14,
    kJobTypeFieldNumber = 17,
    kCDFieldNumber = 18,
    kMaxBulletNumFieldNumber = 19,
    kBulletNumFieldNumber = 20,
    kMaxHpFieldNumber = 21,
    kHpFieldNumber = 22,
    kLifeNumFieldNumber = 23,
  };
  // int64 guid = 2;
  void clear_guid();
  ::PROTOBUF_NAMESPACE_ID::int64 guid() const;
  void set_guid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_guid() const;
  void _internal_set_guid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Protobuf.GameObjType gameObjType = 1;
  void clear_gameobjtype();
  ::Protobuf::GameObjType gameobjtype() const;
  void set_gameobjtype(::Protobuf::GameObjType value);
  private:
  ::Protobuf::GameObjType _internal_gameobjtype() const;
  void _internal_set_gameobjtype(::Protobuf::GameObjType value);
  public:

  // int32 x = 3;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double facingDirection = 5;
  void clear_facingdirection();
  double facingdirection() const;
  void set_facingdirection(double value);
  private:
  double _internal_facingdirection() const;
  void _internal_set_facingdirection(double value);
  public:

  // int32 y = 4;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 moveSpeed = 6;
  void clear_movespeed();
  ::PROTOBUF_NAMESPACE_ID::int32 movespeed() const;
  void set_movespeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_movespeed() const;
  void _internal_set_movespeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Protobuf.ShapeType shapeType = 9;
  void clear_shapetype();
  ::Protobuf::ShapeType shapetype() const;
  void set_shapetype(::Protobuf::ShapeType value);
  private:
  ::Protobuf::ShapeType _internal_shapetype() const;
  void _internal_set_shapetype(::Protobuf::ShapeType value);
  public:

  // int32 radius = 10;
  void clear_radius();
  ::PROTOBUF_NAMESPACE_ID::int32 radius() const;
  void set_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_radius() const;
  void _internal_set_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 teamID = 11;
  void clear_teamid();
  ::PROTOBUF_NAMESPACE_ID::int64 teamid() const;
  void set_teamid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_teamid() const;
  void _internal_set_teamid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool canMove = 7;
  void clear_canmove();
  bool canmove() const;
  void set_canmove(bool value);
  private:
  bool _internal_canmove() const;
  void _internal_set_canmove(bool value);
  public:

  // bool isMoving = 8;
  void clear_ismoving();
  bool ismoving() const;
  void set_ismoving(bool value);
  private:
  bool _internal_ismoving() const;
  void _internal_set_ismoving(bool value);
  public:

  // bool isLaid = 15;
  void clear_islaid();
  bool islaid() const;
  void set_islaid(bool value);
  private:
  bool _internal_islaid() const;
  void _internal_set_islaid(bool value);
  public:

  // bool isDying = 16;
  void clear_isdying();
  bool isdying() const;
  void set_isdying(bool value);
  private:
  bool _internal_isdying() const;
  void _internal_set_isdying(bool value);
  public:

  // int32 ap = 12;
  void clear_ap();
  ::PROTOBUF_NAMESPACE_ID::int32 ap() const;
  void set_ap(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ap() const;
  void _internal_set_ap(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Protobuf.BulletType bulletType = 13;
  void clear_bullettype();
  ::Protobuf::BulletType bullettype() const;
  void set_bullettype(::Protobuf::BulletType value);
  private:
  ::Protobuf::BulletType _internal_bullettype() const;
  void _internal_set_bullettype(::Protobuf::BulletType value);
  public:

  // .Protobuf.PropType propType = 14;
  void clear_proptype();
  ::Protobuf::PropType proptype() const;
  void set_proptype(::Protobuf::PropType value);
  private:
  ::Protobuf::PropType _internal_proptype() const;
  void _internal_set_proptype(::Protobuf::PropType value);
  public:

  // .Protobuf.JobType jobType = 17;
  void clear_jobtype();
  ::Protobuf::JobType jobtype() const;
  void set_jobtype(::Protobuf::JobType value);
  private:
  ::Protobuf::JobType _internal_jobtype() const;
  void _internal_set_jobtype(::Protobuf::JobType value);
  public:

  // int32 CD = 18;
  void clear_cd();
  ::PROTOBUF_NAMESPACE_ID::int32 cd() const;
  void set_cd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cd() const;
  void _internal_set_cd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxBulletNum = 19;
  void clear_maxbulletnum();
  ::PROTOBUF_NAMESPACE_ID::int32 maxbulletnum() const;
  void set_maxbulletnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxbulletnum() const;
  void _internal_set_maxbulletnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bulletNum = 20;
  void clear_bulletnum();
  ::PROTOBUF_NAMESPACE_ID::int32 bulletnum() const;
  void set_bulletnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bulletnum() const;
  void _internal_set_bulletnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxHp = 21;
  void clear_maxhp();
  ::PROTOBUF_NAMESPACE_ID::int32 maxhp() const;
  void set_maxhp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxhp() const;
  void _internal_set_maxhp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hp = 22;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lifeNum = 23;
  void clear_lifenum();
  ::PROTOBUF_NAMESPACE_ID::int32 lifenum() const;
  void set_lifenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lifenum() const;
  void _internal_set_lifenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protobuf.GameObjInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 guid_;
  int gameobjtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  double facingdirection_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 movespeed_;
  int shapetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 radius_;
  ::PROTOBUF_NAMESPACE_ID::int64 teamid_;
  bool canmove_;
  bool ismoving_;
  bool islaid_;
  bool isdying_;
  ::PROTOBUF_NAMESPACE_ID::int32 ap_;
  int bullettype_;
  int proptype_;
  int jobtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 cd_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxbulletnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 bulletnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxhp_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 lifenum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Message2Client_2eproto;
};
// -------------------------------------------------------------------

class MessageToOneClient PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protobuf.MessageToOneClient) */ {
 public:
  inline MessageToOneClient() : MessageToOneClient(nullptr) {}
  virtual ~MessageToOneClient();

  MessageToOneClient(const MessageToOneClient& from);
  MessageToOneClient(MessageToOneClient&& from) noexcept
    : MessageToOneClient() {
    *this = ::std::move(from);
  }

  inline MessageToOneClient& operator=(const MessageToOneClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageToOneClient& operator=(MessageToOneClient&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageToOneClient& default_instance();

  static inline const MessageToOneClient* internal_default_instance() {
    return reinterpret_cast<const MessageToOneClient*>(
               &_MessageToOneClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MessageToOneClient& a, MessageToOneClient& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageToOneClient* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageToOneClient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageToOneClient* New() const final {
    return CreateMaybeMessage<MessageToOneClient>(nullptr);
  }

  MessageToOneClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageToOneClient>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageToOneClient& from);
  void MergeFrom(const MessageToOneClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageToOneClient* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protobuf.MessageToOneClient";
  }
  protected:
  explicit MessageToOneClient(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Message2Client_2eproto);
    return ::descriptor_table_Message2Client_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 5,
    kPlayerIDFieldNumber = 1,
    kTeamIDFieldNumber = 2,
    kGuidFieldNumber = 4,
    kMessageTypeFieldNumber = 3,
  };
  // string message = 5;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 playerID = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int64 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 teamID = 2;
  void clear_teamid();
  ::PROTOBUF_NAMESPACE_ID::int64 teamid() const;
  void set_teamid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_teamid() const;
  void _internal_set_teamid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 guid = 4;
  void clear_guid();
  ::PROTOBUF_NAMESPACE_ID::int64 guid() const;
  void set_guid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_guid() const;
  void _internal_set_guid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Protobuf.MessageType messageType = 3;
  void clear_messagetype();
  ::Protobuf::MessageType messagetype() const;
  void set_messagetype(::Protobuf::MessageType value);
  private:
  ::Protobuf::MessageType _internal_messagetype() const;
  void _internal_set_messagetype(::Protobuf::MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:Protobuf.MessageToOneClient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int64 teamid_;
  ::PROTOBUF_NAMESPACE_ID::int64 guid_;
  int messagetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Message2Client_2eproto;
};
// -------------------------------------------------------------------

class MessageToClient_OneTeamGUIDs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protobuf.MessageToClient.OneTeamGUIDs) */ {
 public:
  inline MessageToClient_OneTeamGUIDs() : MessageToClient_OneTeamGUIDs(nullptr) {}
  virtual ~MessageToClient_OneTeamGUIDs();

  MessageToClient_OneTeamGUIDs(const MessageToClient_OneTeamGUIDs& from);
  MessageToClient_OneTeamGUIDs(MessageToClient_OneTeamGUIDs&& from) noexcept
    : MessageToClient_OneTeamGUIDs() {
    *this = ::std::move(from);
  }

  inline MessageToClient_OneTeamGUIDs& operator=(const MessageToClient_OneTeamGUIDs& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageToClient_OneTeamGUIDs& operator=(MessageToClient_OneTeamGUIDs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageToClient_OneTeamGUIDs& default_instance();

  static inline const MessageToClient_OneTeamGUIDs* internal_default_instance() {
    return reinterpret_cast<const MessageToClient_OneTeamGUIDs*>(
               &_MessageToClient_OneTeamGUIDs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MessageToClient_OneTeamGUIDs& a, MessageToClient_OneTeamGUIDs& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageToClient_OneTeamGUIDs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageToClient_OneTeamGUIDs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageToClient_OneTeamGUIDs* New() const final {
    return CreateMaybeMessage<MessageToClient_OneTeamGUIDs>(nullptr);
  }

  MessageToClient_OneTeamGUIDs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageToClient_OneTeamGUIDs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageToClient_OneTeamGUIDs& from);
  void MergeFrom(const MessageToClient_OneTeamGUIDs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageToClient_OneTeamGUIDs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protobuf.MessageToClient.OneTeamGUIDs";
  }
  protected:
  explicit MessageToClient_OneTeamGUIDs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Message2Client_2eproto);
    return ::descriptor_table_Message2Client_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeammateGUIDsFieldNumber = 1,
  };
  // repeated int64 teammateGUIDs = 1;
  int teammateguids_size() const;
  private:
  int _internal_teammateguids_size() const;
  public:
  void clear_teammateguids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_teammateguids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_teammateguids() const;
  void _internal_add_teammateguids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_teammateguids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 teammateguids(int index) const;
  void set_teammateguids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_teammateguids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      teammateguids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_teammateguids();

  // @@protoc_insertion_point(class_scope:Protobuf.MessageToClient.OneTeamGUIDs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > teammateguids_;
  mutable std::atomic<int> _teammateguids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Message2Client_2eproto;
};
// -------------------------------------------------------------------

class MessageToClient_OneDimVec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protobuf.MessageToClient.OneDimVec) */ {
 public:
  inline MessageToClient_OneDimVec() : MessageToClient_OneDimVec(nullptr) {}
  virtual ~MessageToClient_OneDimVec();

  MessageToClient_OneDimVec(const MessageToClient_OneDimVec& from);
  MessageToClient_OneDimVec(MessageToClient_OneDimVec&& from) noexcept
    : MessageToClient_OneDimVec() {
    *this = ::std::move(from);
  }

  inline MessageToClient_OneDimVec& operator=(const MessageToClient_OneDimVec& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageToClient_OneDimVec& operator=(MessageToClient_OneDimVec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageToClient_OneDimVec& default_instance();

  static inline const MessageToClient_OneDimVec* internal_default_instance() {
    return reinterpret_cast<const MessageToClient_OneDimVec*>(
               &_MessageToClient_OneDimVec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MessageToClient_OneDimVec& a, MessageToClient_OneDimVec& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageToClient_OneDimVec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageToClient_OneDimVec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageToClient_OneDimVec* New() const final {
    return CreateMaybeMessage<MessageToClient_OneDimVec>(nullptr);
  }

  MessageToClient_OneDimVec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageToClient_OneDimVec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageToClient_OneDimVec& from);
  void MergeFrom(const MessageToClient_OneDimVec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageToClient_OneDimVec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protobuf.MessageToClient.OneDimVec";
  }
  protected:
  explicit MessageToClient_OneDimVec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Message2Client_2eproto);
    return ::descriptor_table_Message2Client_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowColorsFieldNumber = 1,
  };
  // repeated .Protobuf.ColorType rowColors = 1;
  int rowcolors_size() const;
  private:
  int _internal_rowcolors_size() const;
  public:
  void clear_rowcolors();
  private:
  ::Protobuf::ColorType _internal_rowcolors(int index) const;
  void _internal_add_rowcolors(::Protobuf::ColorType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_rowcolors();
  public:
  ::Protobuf::ColorType rowcolors(int index) const;
  void set_rowcolors(int index, ::Protobuf::ColorType value);
  void add_rowcolors(::Protobuf::ColorType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& rowcolors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_rowcolors();

  // @@protoc_insertion_point(class_scope:Protobuf.MessageToClient.OneDimVec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> rowcolors_;
  mutable std::atomic<int> _rowcolors_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Message2Client_2eproto;
};
// -------------------------------------------------------------------

class MessageToClient PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protobuf.MessageToClient) */ {
 public:
  inline MessageToClient() : MessageToClient(nullptr) {}
  virtual ~MessageToClient();

  MessageToClient(const MessageToClient& from);
  MessageToClient(MessageToClient&& from) noexcept
    : MessageToClient() {
    *this = ::std::move(from);
  }

  inline MessageToClient& operator=(const MessageToClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageToClient& operator=(MessageToClient&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageToClient& default_instance();

  static inline const MessageToClient* internal_default_instance() {
    return reinterpret_cast<const MessageToClient*>(
               &_MessageToClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MessageToClient& a, MessageToClient& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageToClient* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageToClient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageToClient* New() const final {
    return CreateMaybeMessage<MessageToClient>(nullptr);
  }

  MessageToClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageToClient>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageToClient& from);
  void MergeFrom(const MessageToClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageToClient* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protobuf.MessageToClient";
  }
  protected:
  explicit MessageToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Message2Client_2eproto);
    return ::descriptor_table_Message2Client_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MessageToClient_OneTeamGUIDs OneTeamGUIDs;
  typedef MessageToClient_OneDimVec OneDimVec;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerGUIDsFieldNumber = 5,
    kGameObjsFieldNumber = 7,
    kCellColorsFieldNumber = 8,
    kSelfInfoFieldNumber = 4,
    kPlayerIDFieldNumber = 1,
    kTeamIDFieldNumber = 2,
    kMessageTypeFieldNumber = 3,
    kSelfTeamColorFieldNumber = 6,
    kTeamScoreFieldNumber = 9,
  };
  // repeated .Protobuf.MessageToClient.OneTeamGUIDs PlayerGUIDs = 5;
  int playerguids_size() const;
  private:
  int _internal_playerguids_size() const;
  public:
  void clear_playerguids();
  ::Protobuf::MessageToClient_OneTeamGUIDs* mutable_playerguids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::MessageToClient_OneTeamGUIDs >*
      mutable_playerguids();
  private:
  const ::Protobuf::MessageToClient_OneTeamGUIDs& _internal_playerguids(int index) const;
  ::Protobuf::MessageToClient_OneTeamGUIDs* _internal_add_playerguids();
  public:
  const ::Protobuf::MessageToClient_OneTeamGUIDs& playerguids(int index) const;
  ::Protobuf::MessageToClient_OneTeamGUIDs* add_playerguids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::MessageToClient_OneTeamGUIDs >&
      playerguids() const;

  // repeated .Protobuf.GameObjInfo gameObjs = 7;
  int gameobjs_size() const;
  private:
  int _internal_gameobjs_size() const;
  public:
  void clear_gameobjs();
  ::Protobuf::GameObjInfo* mutable_gameobjs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::GameObjInfo >*
      mutable_gameobjs();
  private:
  const ::Protobuf::GameObjInfo& _internal_gameobjs(int index) const;
  ::Protobuf::GameObjInfo* _internal_add_gameobjs();
  public:
  const ::Protobuf::GameObjInfo& gameobjs(int index) const;
  ::Protobuf::GameObjInfo* add_gameobjs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::GameObjInfo >&
      gameobjs() const;

  // repeated .Protobuf.MessageToClient.OneDimVec cellColors = 8;
  int cellcolors_size() const;
  private:
  int _internal_cellcolors_size() const;
  public:
  void clear_cellcolors();
  ::Protobuf::MessageToClient_OneDimVec* mutable_cellcolors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::MessageToClient_OneDimVec >*
      mutable_cellcolors();
  private:
  const ::Protobuf::MessageToClient_OneDimVec& _internal_cellcolors(int index) const;
  ::Protobuf::MessageToClient_OneDimVec* _internal_add_cellcolors();
  public:
  const ::Protobuf::MessageToClient_OneDimVec& cellcolors(int index) const;
  ::Protobuf::MessageToClient_OneDimVec* add_cellcolors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::MessageToClient_OneDimVec >&
      cellcolors() const;

  // .Protobuf.GameObjInfo selfInfo = 4;
  bool has_selfinfo() const;
  private:
  bool _internal_has_selfinfo() const;
  public:
  void clear_selfinfo();
  const ::Protobuf::GameObjInfo& selfinfo() const;
  ::Protobuf::GameObjInfo* release_selfinfo();
  ::Protobuf::GameObjInfo* mutable_selfinfo();
  void set_allocated_selfinfo(::Protobuf::GameObjInfo* selfinfo);
  private:
  const ::Protobuf::GameObjInfo& _internal_selfinfo() const;
  ::Protobuf::GameObjInfo* _internal_mutable_selfinfo();
  public:
  void unsafe_arena_set_allocated_selfinfo(
      ::Protobuf::GameObjInfo* selfinfo);
  ::Protobuf::GameObjInfo* unsafe_arena_release_selfinfo();

  // int64 playerID = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int64 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 teamID = 2;
  void clear_teamid();
  ::PROTOBUF_NAMESPACE_ID::int64 teamid() const;
  void set_teamid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_teamid() const;
  void _internal_set_teamid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Protobuf.MessageType messageType = 3;
  void clear_messagetype();
  ::Protobuf::MessageType messagetype() const;
  void set_messagetype(::Protobuf::MessageType value);
  private:
  ::Protobuf::MessageType _internal_messagetype() const;
  void _internal_set_messagetype(::Protobuf::MessageType value);
  public:

  // .Protobuf.ColorType selfTeamColor = 6;
  void clear_selfteamcolor();
  ::Protobuf::ColorType selfteamcolor() const;
  void set_selfteamcolor(::Protobuf::ColorType value);
  private:
  ::Protobuf::ColorType _internal_selfteamcolor() const;
  void _internal_set_selfteamcolor(::Protobuf::ColorType value);
  public:

  // int32 teamScore = 9;
  void clear_teamscore();
  ::PROTOBUF_NAMESPACE_ID::int32 teamscore() const;
  void set_teamscore(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_teamscore() const;
  void _internal_set_teamscore(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protobuf.MessageToClient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::MessageToClient_OneTeamGUIDs > playerguids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::GameObjInfo > gameobjs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::MessageToClient_OneDimVec > cellcolors_;
  ::Protobuf::GameObjInfo* selfinfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int64 teamid_;
  int messagetype_;
  int selfteamcolor_;
  ::PROTOBUF_NAMESPACE_ID::int32 teamscore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Message2Client_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameObjInfo

// .Protobuf.GameObjType gameObjType = 1;
inline void GameObjInfo::clear_gameobjtype() {
  gameobjtype_ = 0;
}
inline ::Protobuf::GameObjType GameObjInfo::_internal_gameobjtype() const {
  return static_cast< ::Protobuf::GameObjType >(gameobjtype_);
}
inline ::Protobuf::GameObjType GameObjInfo::gameobjtype() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.gameObjType)
  return _internal_gameobjtype();
}
inline void GameObjInfo::_internal_set_gameobjtype(::Protobuf::GameObjType value) {
  
  gameobjtype_ = value;
}
inline void GameObjInfo::set_gameobjtype(::Protobuf::GameObjType value) {
  _internal_set_gameobjtype(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.gameObjType)
}

// int64 guid = 2;
inline void GameObjInfo::clear_guid() {
  guid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameObjInfo::_internal_guid() const {
  return guid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameObjInfo::guid() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.guid)
  return _internal_guid();
}
inline void GameObjInfo::_internal_set_guid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  guid_ = value;
}
inline void GameObjInfo::set_guid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.guid)
}

// int32 x = 3;
inline void GameObjInfo::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::x() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.x)
  return _internal_x();
}
inline void GameObjInfo::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void GameObjInfo::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.x)
}

// int32 y = 4;
inline void GameObjInfo::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::y() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.y)
  return _internal_y();
}
inline void GameObjInfo::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void GameObjInfo::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.y)
}

// double facingDirection = 5;
inline void GameObjInfo::clear_facingdirection() {
  facingdirection_ = 0;
}
inline double GameObjInfo::_internal_facingdirection() const {
  return facingdirection_;
}
inline double GameObjInfo::facingdirection() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.facingDirection)
  return _internal_facingdirection();
}
inline void GameObjInfo::_internal_set_facingdirection(double value) {
  
  facingdirection_ = value;
}
inline void GameObjInfo::set_facingdirection(double value) {
  _internal_set_facingdirection(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.facingDirection)
}

// int32 moveSpeed = 6;
inline void GameObjInfo::clear_movespeed() {
  movespeed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::_internal_movespeed() const {
  return movespeed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::movespeed() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.moveSpeed)
  return _internal_movespeed();
}
inline void GameObjInfo::_internal_set_movespeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  movespeed_ = value;
}
inline void GameObjInfo::set_movespeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_movespeed(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.moveSpeed)
}

// bool canMove = 7;
inline void GameObjInfo::clear_canmove() {
  canmove_ = false;
}
inline bool GameObjInfo::_internal_canmove() const {
  return canmove_;
}
inline bool GameObjInfo::canmove() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.canMove)
  return _internal_canmove();
}
inline void GameObjInfo::_internal_set_canmove(bool value) {
  
  canmove_ = value;
}
inline void GameObjInfo::set_canmove(bool value) {
  _internal_set_canmove(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.canMove)
}

// bool isMoving = 8;
inline void GameObjInfo::clear_ismoving() {
  ismoving_ = false;
}
inline bool GameObjInfo::_internal_ismoving() const {
  return ismoving_;
}
inline bool GameObjInfo::ismoving() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.isMoving)
  return _internal_ismoving();
}
inline void GameObjInfo::_internal_set_ismoving(bool value) {
  
  ismoving_ = value;
}
inline void GameObjInfo::set_ismoving(bool value) {
  _internal_set_ismoving(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.isMoving)
}

// .Protobuf.ShapeType shapeType = 9;
inline void GameObjInfo::clear_shapetype() {
  shapetype_ = 0;
}
inline ::Protobuf::ShapeType GameObjInfo::_internal_shapetype() const {
  return static_cast< ::Protobuf::ShapeType >(shapetype_);
}
inline ::Protobuf::ShapeType GameObjInfo::shapetype() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.shapeType)
  return _internal_shapetype();
}
inline void GameObjInfo::_internal_set_shapetype(::Protobuf::ShapeType value) {
  
  shapetype_ = value;
}
inline void GameObjInfo::set_shapetype(::Protobuf::ShapeType value) {
  _internal_set_shapetype(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.shapeType)
}

// int32 radius = 10;
inline void GameObjInfo::clear_radius() {
  radius_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::_internal_radius() const {
  return radius_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::radius() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.radius)
  return _internal_radius();
}
inline void GameObjInfo::_internal_set_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  radius_ = value;
}
inline void GameObjInfo::set_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.radius)
}

// int64 teamID = 11;
inline void GameObjInfo::clear_teamid() {
  teamid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameObjInfo::_internal_teamid() const {
  return teamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameObjInfo::teamid() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.teamID)
  return _internal_teamid();
}
inline void GameObjInfo::_internal_set_teamid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  teamid_ = value;
}
inline void GameObjInfo::set_teamid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.teamID)
}

// int32 ap = 12;
inline void GameObjInfo::clear_ap() {
  ap_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::_internal_ap() const {
  return ap_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::ap() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.ap)
  return _internal_ap();
}
inline void GameObjInfo::_internal_set_ap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ap_ = value;
}
inline void GameObjInfo::set_ap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ap(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.ap)
}

// .Protobuf.BulletType bulletType = 13;
inline void GameObjInfo::clear_bullettype() {
  bullettype_ = 0;
}
inline ::Protobuf::BulletType GameObjInfo::_internal_bullettype() const {
  return static_cast< ::Protobuf::BulletType >(bullettype_);
}
inline ::Protobuf::BulletType GameObjInfo::bullettype() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.bulletType)
  return _internal_bullettype();
}
inline void GameObjInfo::_internal_set_bullettype(::Protobuf::BulletType value) {
  
  bullettype_ = value;
}
inline void GameObjInfo::set_bullettype(::Protobuf::BulletType value) {
  _internal_set_bullettype(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.bulletType)
}

// .Protobuf.PropType propType = 14;
inline void GameObjInfo::clear_proptype() {
  proptype_ = 0;
}
inline ::Protobuf::PropType GameObjInfo::_internal_proptype() const {
  return static_cast< ::Protobuf::PropType >(proptype_);
}
inline ::Protobuf::PropType GameObjInfo::proptype() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.propType)
  return _internal_proptype();
}
inline void GameObjInfo::_internal_set_proptype(::Protobuf::PropType value) {
  
  proptype_ = value;
}
inline void GameObjInfo::set_proptype(::Protobuf::PropType value) {
  _internal_set_proptype(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.propType)
}

// bool isLaid = 15;
inline void GameObjInfo::clear_islaid() {
  islaid_ = false;
}
inline bool GameObjInfo::_internal_islaid() const {
  return islaid_;
}
inline bool GameObjInfo::islaid() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.isLaid)
  return _internal_islaid();
}
inline void GameObjInfo::_internal_set_islaid(bool value) {
  
  islaid_ = value;
}
inline void GameObjInfo::set_islaid(bool value) {
  _internal_set_islaid(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.isLaid)
}

// bool isDying = 16;
inline void GameObjInfo::clear_isdying() {
  isdying_ = false;
}
inline bool GameObjInfo::_internal_isdying() const {
  return isdying_;
}
inline bool GameObjInfo::isdying() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.isDying)
  return _internal_isdying();
}
inline void GameObjInfo::_internal_set_isdying(bool value) {
  
  isdying_ = value;
}
inline void GameObjInfo::set_isdying(bool value) {
  _internal_set_isdying(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.isDying)
}

// .Protobuf.JobType jobType = 17;
inline void GameObjInfo::clear_jobtype() {
  jobtype_ = 0;
}
inline ::Protobuf::JobType GameObjInfo::_internal_jobtype() const {
  return static_cast< ::Protobuf::JobType >(jobtype_);
}
inline ::Protobuf::JobType GameObjInfo::jobtype() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.jobType)
  return _internal_jobtype();
}
inline void GameObjInfo::_internal_set_jobtype(::Protobuf::JobType value) {
  
  jobtype_ = value;
}
inline void GameObjInfo::set_jobtype(::Protobuf::JobType value) {
  _internal_set_jobtype(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.jobType)
}

// int32 CD = 18;
inline void GameObjInfo::clear_cd() {
  cd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::_internal_cd() const {
  return cd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::cd() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.CD)
  return _internal_cd();
}
inline void GameObjInfo::_internal_set_cd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cd_ = value;
}
inline void GameObjInfo::set_cd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cd(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.CD)
}

// int32 maxBulletNum = 19;
inline void GameObjInfo::clear_maxbulletnum() {
  maxbulletnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::_internal_maxbulletnum() const {
  return maxbulletnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::maxbulletnum() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.maxBulletNum)
  return _internal_maxbulletnum();
}
inline void GameObjInfo::_internal_set_maxbulletnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxbulletnum_ = value;
}
inline void GameObjInfo::set_maxbulletnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxbulletnum(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.maxBulletNum)
}

// int32 bulletNum = 20;
inline void GameObjInfo::clear_bulletnum() {
  bulletnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::_internal_bulletnum() const {
  return bulletnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::bulletnum() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.bulletNum)
  return _internal_bulletnum();
}
inline void GameObjInfo::_internal_set_bulletnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bulletnum_ = value;
}
inline void GameObjInfo::set_bulletnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bulletnum(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.bulletNum)
}

// int32 maxHp = 21;
inline void GameObjInfo::clear_maxhp() {
  maxhp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::_internal_maxhp() const {
  return maxhp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::maxhp() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.maxHp)
  return _internal_maxhp();
}
inline void GameObjInfo::_internal_set_maxhp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxhp_ = value;
}
inline void GameObjInfo::set_maxhp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.maxHp)
}

// int32 hp = 22;
inline void GameObjInfo::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::hp() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.hp)
  return _internal_hp();
}
inline void GameObjInfo::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
}
inline void GameObjInfo::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.hp)
}

// int32 lifeNum = 23;
inline void GameObjInfo::clear_lifenum() {
  lifenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::_internal_lifenum() const {
  return lifenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObjInfo::lifenum() const {
  // @@protoc_insertion_point(field_get:Protobuf.GameObjInfo.lifeNum)
  return _internal_lifenum();
}
inline void GameObjInfo::_internal_set_lifenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lifenum_ = value;
}
inline void GameObjInfo::set_lifenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lifenum(value);
  // @@protoc_insertion_point(field_set:Protobuf.GameObjInfo.lifeNum)
}

// -------------------------------------------------------------------

// MessageToOneClient

// int64 playerID = 1;
inline void MessageToOneClient::clear_playerid() {
  playerid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageToOneClient::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageToOneClient::playerid() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToOneClient.playerID)
  return _internal_playerid();
}
inline void MessageToOneClient::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  playerid_ = value;
}
inline void MessageToOneClient::set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToOneClient.playerID)
}

// int64 teamID = 2;
inline void MessageToOneClient::clear_teamid() {
  teamid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageToOneClient::_internal_teamid() const {
  return teamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageToOneClient::teamid() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToOneClient.teamID)
  return _internal_teamid();
}
inline void MessageToOneClient::_internal_set_teamid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  teamid_ = value;
}
inline void MessageToOneClient::set_teamid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToOneClient.teamID)
}

// .Protobuf.MessageType messageType = 3;
inline void MessageToOneClient::clear_messagetype() {
  messagetype_ = 0;
}
inline ::Protobuf::MessageType MessageToOneClient::_internal_messagetype() const {
  return static_cast< ::Protobuf::MessageType >(messagetype_);
}
inline ::Protobuf::MessageType MessageToOneClient::messagetype() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToOneClient.messageType)
  return _internal_messagetype();
}
inline void MessageToOneClient::_internal_set_messagetype(::Protobuf::MessageType value) {
  
  messagetype_ = value;
}
inline void MessageToOneClient::set_messagetype(::Protobuf::MessageType value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToOneClient.messageType)
}

// int64 guid = 4;
inline void MessageToOneClient::clear_guid() {
  guid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageToOneClient::_internal_guid() const {
  return guid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageToOneClient::guid() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToOneClient.guid)
  return _internal_guid();
}
inline void MessageToOneClient::_internal_set_guid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  guid_ = value;
}
inline void MessageToOneClient::set_guid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToOneClient.guid)
}

// string message = 5;
inline void MessageToOneClient::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& MessageToOneClient::message() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToOneClient.message)
  return _internal_message();
}
inline void MessageToOneClient::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToOneClient.message)
}
inline std::string* MessageToOneClient::mutable_message() {
  // @@protoc_insertion_point(field_mutable:Protobuf.MessageToOneClient.message)
  return _internal_mutable_message();
}
inline const std::string& MessageToOneClient::_internal_message() const {
  return message_.Get();
}
inline void MessageToOneClient::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageToOneClient::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Protobuf.MessageToOneClient.message)
}
inline void MessageToOneClient::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Protobuf.MessageToOneClient.message)
}
inline void MessageToOneClient::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Protobuf.MessageToOneClient.message)
}
inline std::string* MessageToOneClient::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageToOneClient::release_message() {
  // @@protoc_insertion_point(field_release:Protobuf.MessageToOneClient.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageToOneClient::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Protobuf.MessageToOneClient.message)
}

// -------------------------------------------------------------------

// MessageToClient_OneTeamGUIDs

// repeated int64 teammateGUIDs = 1;
inline int MessageToClient_OneTeamGUIDs::_internal_teammateguids_size() const {
  return teammateguids_.size();
}
inline int MessageToClient_OneTeamGUIDs::teammateguids_size() const {
  return _internal_teammateguids_size();
}
inline void MessageToClient_OneTeamGUIDs::clear_teammateguids() {
  teammateguids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageToClient_OneTeamGUIDs::_internal_teammateguids(int index) const {
  return teammateguids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageToClient_OneTeamGUIDs::teammateguids(int index) const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToClient.OneTeamGUIDs.teammateGUIDs)
  return _internal_teammateguids(index);
}
inline void MessageToClient_OneTeamGUIDs::set_teammateguids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  teammateguids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToClient.OneTeamGUIDs.teammateGUIDs)
}
inline void MessageToClient_OneTeamGUIDs::_internal_add_teammateguids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  teammateguids_.Add(value);
}
inline void MessageToClient_OneTeamGUIDs::add_teammateguids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_teammateguids(value);
  // @@protoc_insertion_point(field_add:Protobuf.MessageToClient.OneTeamGUIDs.teammateGUIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MessageToClient_OneTeamGUIDs::_internal_teammateguids() const {
  return teammateguids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MessageToClient_OneTeamGUIDs::teammateguids() const {
  // @@protoc_insertion_point(field_list:Protobuf.MessageToClient.OneTeamGUIDs.teammateGUIDs)
  return _internal_teammateguids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MessageToClient_OneTeamGUIDs::_internal_mutable_teammateguids() {
  return &teammateguids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MessageToClient_OneTeamGUIDs::mutable_teammateguids() {
  // @@protoc_insertion_point(field_mutable_list:Protobuf.MessageToClient.OneTeamGUIDs.teammateGUIDs)
  return _internal_mutable_teammateguids();
}

// -------------------------------------------------------------------

// MessageToClient_OneDimVec

// repeated .Protobuf.ColorType rowColors = 1;
inline int MessageToClient_OneDimVec::_internal_rowcolors_size() const {
  return rowcolors_.size();
}
inline int MessageToClient_OneDimVec::rowcolors_size() const {
  return _internal_rowcolors_size();
}
inline void MessageToClient_OneDimVec::clear_rowcolors() {
  rowcolors_.Clear();
}
inline ::Protobuf::ColorType MessageToClient_OneDimVec::_internal_rowcolors(int index) const {
  return static_cast< ::Protobuf::ColorType >(rowcolors_.Get(index));
}
inline ::Protobuf::ColorType MessageToClient_OneDimVec::rowcolors(int index) const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToClient.OneDimVec.rowColors)
  return _internal_rowcolors(index);
}
inline void MessageToClient_OneDimVec::set_rowcolors(int index, ::Protobuf::ColorType value) {
  rowcolors_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToClient.OneDimVec.rowColors)
}
inline void MessageToClient_OneDimVec::_internal_add_rowcolors(::Protobuf::ColorType value) {
  rowcolors_.Add(value);
}
inline void MessageToClient_OneDimVec::add_rowcolors(::Protobuf::ColorType value) {
  // @@protoc_insertion_point(field_add:Protobuf.MessageToClient.OneDimVec.rowColors)
  _internal_add_rowcolors(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
MessageToClient_OneDimVec::rowcolors() const {
  // @@protoc_insertion_point(field_list:Protobuf.MessageToClient.OneDimVec.rowColors)
  return rowcolors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
MessageToClient_OneDimVec::_internal_mutable_rowcolors() {
  return &rowcolors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
MessageToClient_OneDimVec::mutable_rowcolors() {
  // @@protoc_insertion_point(field_mutable_list:Protobuf.MessageToClient.OneDimVec.rowColors)
  return _internal_mutable_rowcolors();
}

// -------------------------------------------------------------------

// MessageToClient

// int64 playerID = 1;
inline void MessageToClient::clear_playerid() {
  playerid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageToClient::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageToClient::playerid() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToClient.playerID)
  return _internal_playerid();
}
inline void MessageToClient::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  playerid_ = value;
}
inline void MessageToClient::set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToClient.playerID)
}

// int64 teamID = 2;
inline void MessageToClient::clear_teamid() {
  teamid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageToClient::_internal_teamid() const {
  return teamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageToClient::teamid() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToClient.teamID)
  return _internal_teamid();
}
inline void MessageToClient::_internal_set_teamid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  teamid_ = value;
}
inline void MessageToClient::set_teamid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToClient.teamID)
}

// .Protobuf.MessageType messageType = 3;
inline void MessageToClient::clear_messagetype() {
  messagetype_ = 0;
}
inline ::Protobuf::MessageType MessageToClient::_internal_messagetype() const {
  return static_cast< ::Protobuf::MessageType >(messagetype_);
}
inline ::Protobuf::MessageType MessageToClient::messagetype() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToClient.messageType)
  return _internal_messagetype();
}
inline void MessageToClient::_internal_set_messagetype(::Protobuf::MessageType value) {
  
  messagetype_ = value;
}
inline void MessageToClient::set_messagetype(::Protobuf::MessageType value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToClient.messageType)
}

// .Protobuf.GameObjInfo selfInfo = 4;
inline bool MessageToClient::_internal_has_selfinfo() const {
  return this != internal_default_instance() && selfinfo_ != nullptr;
}
inline bool MessageToClient::has_selfinfo() const {
  return _internal_has_selfinfo();
}
inline void MessageToClient::clear_selfinfo() {
  if (GetArena() == nullptr && selfinfo_ != nullptr) {
    delete selfinfo_;
  }
  selfinfo_ = nullptr;
}
inline const ::Protobuf::GameObjInfo& MessageToClient::_internal_selfinfo() const {
  const ::Protobuf::GameObjInfo* p = selfinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protobuf::GameObjInfo&>(
      ::Protobuf::_GameObjInfo_default_instance_);
}
inline const ::Protobuf::GameObjInfo& MessageToClient::selfinfo() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToClient.selfInfo)
  return _internal_selfinfo();
}
inline void MessageToClient::unsafe_arena_set_allocated_selfinfo(
    ::Protobuf::GameObjInfo* selfinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selfinfo_);
  }
  selfinfo_ = selfinfo;
  if (selfinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protobuf.MessageToClient.selfInfo)
}
inline ::Protobuf::GameObjInfo* MessageToClient::release_selfinfo() {
  
  ::Protobuf::GameObjInfo* temp = selfinfo_;
  selfinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protobuf::GameObjInfo* MessageToClient::unsafe_arena_release_selfinfo() {
  // @@protoc_insertion_point(field_release:Protobuf.MessageToClient.selfInfo)
  
  ::Protobuf::GameObjInfo* temp = selfinfo_;
  selfinfo_ = nullptr;
  return temp;
}
inline ::Protobuf::GameObjInfo* MessageToClient::_internal_mutable_selfinfo() {
  
  if (selfinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protobuf::GameObjInfo>(GetArena());
    selfinfo_ = p;
  }
  return selfinfo_;
}
inline ::Protobuf::GameObjInfo* MessageToClient::mutable_selfinfo() {
  // @@protoc_insertion_point(field_mutable:Protobuf.MessageToClient.selfInfo)
  return _internal_mutable_selfinfo();
}
inline void MessageToClient::set_allocated_selfinfo(::Protobuf::GameObjInfo* selfinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selfinfo_;
  }
  if (selfinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selfinfo);
    if (message_arena != submessage_arena) {
      selfinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selfinfo, submessage_arena);
    }
    
  } else {
    
  }
  selfinfo_ = selfinfo;
  // @@protoc_insertion_point(field_set_allocated:Protobuf.MessageToClient.selfInfo)
}

// .Protobuf.ColorType selfTeamColor = 6;
inline void MessageToClient::clear_selfteamcolor() {
  selfteamcolor_ = 0;
}
inline ::Protobuf::ColorType MessageToClient::_internal_selfteamcolor() const {
  return static_cast< ::Protobuf::ColorType >(selfteamcolor_);
}
inline ::Protobuf::ColorType MessageToClient::selfteamcolor() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToClient.selfTeamColor)
  return _internal_selfteamcolor();
}
inline void MessageToClient::_internal_set_selfteamcolor(::Protobuf::ColorType value) {
  
  selfteamcolor_ = value;
}
inline void MessageToClient::set_selfteamcolor(::Protobuf::ColorType value) {
  _internal_set_selfteamcolor(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToClient.selfTeamColor)
}

// repeated .Protobuf.GameObjInfo gameObjs = 7;
inline int MessageToClient::_internal_gameobjs_size() const {
  return gameobjs_.size();
}
inline int MessageToClient::gameobjs_size() const {
  return _internal_gameobjs_size();
}
inline void MessageToClient::clear_gameobjs() {
  gameobjs_.Clear();
}
inline ::Protobuf::GameObjInfo* MessageToClient::mutable_gameobjs(int index) {
  // @@protoc_insertion_point(field_mutable:Protobuf.MessageToClient.gameObjs)
  return gameobjs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::GameObjInfo >*
MessageToClient::mutable_gameobjs() {
  // @@protoc_insertion_point(field_mutable_list:Protobuf.MessageToClient.gameObjs)
  return &gameobjs_;
}
inline const ::Protobuf::GameObjInfo& MessageToClient::_internal_gameobjs(int index) const {
  return gameobjs_.Get(index);
}
inline const ::Protobuf::GameObjInfo& MessageToClient::gameobjs(int index) const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToClient.gameObjs)
  return _internal_gameobjs(index);
}
inline ::Protobuf::GameObjInfo* MessageToClient::_internal_add_gameobjs() {
  return gameobjs_.Add();
}
inline ::Protobuf::GameObjInfo* MessageToClient::add_gameobjs() {
  // @@protoc_insertion_point(field_add:Protobuf.MessageToClient.gameObjs)
  return _internal_add_gameobjs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::GameObjInfo >&
MessageToClient::gameobjs() const {
  // @@protoc_insertion_point(field_list:Protobuf.MessageToClient.gameObjs)
  return gameobjs_;
}

// repeated .Protobuf.MessageToClient.OneTeamGUIDs PlayerGUIDs = 5;
inline int MessageToClient::_internal_playerguids_size() const {
  return playerguids_.size();
}
inline int MessageToClient::playerguids_size() const {
  return _internal_playerguids_size();
}
inline void MessageToClient::clear_playerguids() {
  playerguids_.Clear();
}
inline ::Protobuf::MessageToClient_OneTeamGUIDs* MessageToClient::mutable_playerguids(int index) {
  // @@protoc_insertion_point(field_mutable:Protobuf.MessageToClient.PlayerGUIDs)
  return playerguids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::MessageToClient_OneTeamGUIDs >*
MessageToClient::mutable_playerguids() {
  // @@protoc_insertion_point(field_mutable_list:Protobuf.MessageToClient.PlayerGUIDs)
  return &playerguids_;
}
inline const ::Protobuf::MessageToClient_OneTeamGUIDs& MessageToClient::_internal_playerguids(int index) const {
  return playerguids_.Get(index);
}
inline const ::Protobuf::MessageToClient_OneTeamGUIDs& MessageToClient::playerguids(int index) const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToClient.PlayerGUIDs)
  return _internal_playerguids(index);
}
inline ::Protobuf::MessageToClient_OneTeamGUIDs* MessageToClient::_internal_add_playerguids() {
  return playerguids_.Add();
}
inline ::Protobuf::MessageToClient_OneTeamGUIDs* MessageToClient::add_playerguids() {
  // @@protoc_insertion_point(field_add:Protobuf.MessageToClient.PlayerGUIDs)
  return _internal_add_playerguids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::MessageToClient_OneTeamGUIDs >&
MessageToClient::playerguids() const {
  // @@protoc_insertion_point(field_list:Protobuf.MessageToClient.PlayerGUIDs)
  return playerguids_;
}

// repeated .Protobuf.MessageToClient.OneDimVec cellColors = 8;
inline int MessageToClient::_internal_cellcolors_size() const {
  return cellcolors_.size();
}
inline int MessageToClient::cellcolors_size() const {
  return _internal_cellcolors_size();
}
inline void MessageToClient::clear_cellcolors() {
  cellcolors_.Clear();
}
inline ::Protobuf::MessageToClient_OneDimVec* MessageToClient::mutable_cellcolors(int index) {
  // @@protoc_insertion_point(field_mutable:Protobuf.MessageToClient.cellColors)
  return cellcolors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::MessageToClient_OneDimVec >*
MessageToClient::mutable_cellcolors() {
  // @@protoc_insertion_point(field_mutable_list:Protobuf.MessageToClient.cellColors)
  return &cellcolors_;
}
inline const ::Protobuf::MessageToClient_OneDimVec& MessageToClient::_internal_cellcolors(int index) const {
  return cellcolors_.Get(index);
}
inline const ::Protobuf::MessageToClient_OneDimVec& MessageToClient::cellcolors(int index) const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToClient.cellColors)
  return _internal_cellcolors(index);
}
inline ::Protobuf::MessageToClient_OneDimVec* MessageToClient::_internal_add_cellcolors() {
  return cellcolors_.Add();
}
inline ::Protobuf::MessageToClient_OneDimVec* MessageToClient::add_cellcolors() {
  // @@protoc_insertion_point(field_add:Protobuf.MessageToClient.cellColors)
  return _internal_add_cellcolors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::MessageToClient_OneDimVec >&
MessageToClient::cellcolors() const {
  // @@protoc_insertion_point(field_list:Protobuf.MessageToClient.cellColors)
  return cellcolors_;
}

// int32 teamScore = 9;
inline void MessageToClient::clear_teamscore() {
  teamscore_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageToClient::_internal_teamscore() const {
  return teamscore_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageToClient::teamscore() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToClient.teamScore)
  return _internal_teamscore();
}
inline void MessageToClient::_internal_set_teamscore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  teamscore_ = value;
}
inline void MessageToClient::set_teamscore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_teamscore(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToClient.teamScore)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protobuf::GameObjType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protobuf::GameObjType>() {
  return ::Protobuf::GameObjType_descriptor();
}
template <> struct is_proto_enum< ::Protobuf::PropType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protobuf::PropType>() {
  return ::Protobuf::PropType_descriptor();
}
template <> struct is_proto_enum< ::Protobuf::ShapeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protobuf::ShapeType>() {
  return ::Protobuf::ShapeType_descriptor();
}
template <> struct is_proto_enum< ::Protobuf::JobType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protobuf::JobType>() {
  return ::Protobuf::JobType_descriptor();
}
template <> struct is_proto_enum< ::Protobuf::BulletType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protobuf::BulletType>() {
  return ::Protobuf::BulletType_descriptor();
}
template <> struct is_proto_enum< ::Protobuf::ColorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protobuf::ColorType>() {
  return ::Protobuf::ColorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Message2Client_2eproto
