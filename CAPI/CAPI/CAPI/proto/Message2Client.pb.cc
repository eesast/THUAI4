// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message2Client.proto

#include "Message2Client.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Message2Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameObjInfo_Message2Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Message2Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageToClient_OneDimVec_Message2Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Message2Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageToClient_OneTeamGUIDs_Message2Client_2eproto;
namespace Protobuf {
class GameObjInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameObjInfo> _instance;
} _GameObjInfo_default_instance_;
class MessageToOneClientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageToOneClient> _instance;
} _MessageToOneClient_default_instance_;
class MessageToClient_OneTeamGUIDsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageToClient_OneTeamGUIDs> _instance;
} _MessageToClient_OneTeamGUIDs_default_instance_;
class MessageToClient_OneDimVecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageToClient_OneDimVec> _instance;
} _MessageToClient_OneDimVec_default_instance_;
class MessageToClientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageToClient> _instance;
} _MessageToClient_default_instance_;
}  // namespace Protobuf
static void InitDefaultsscc_info_GameObjInfo_Message2Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protobuf::_GameObjInfo_default_instance_;
    new (ptr) ::Protobuf::GameObjInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameObjInfo_Message2Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameObjInfo_Message2Client_2eproto}, {}};

static void InitDefaultsscc_info_MessageToClient_Message2Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protobuf::_MessageToClient_default_instance_;
    new (ptr) ::Protobuf::MessageToClient();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MessageToClient_Message2Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MessageToClient_Message2Client_2eproto}, {
      &scc_info_GameObjInfo_Message2Client_2eproto.base,
      &scc_info_MessageToClient_OneTeamGUIDs_Message2Client_2eproto.base,
      &scc_info_MessageToClient_OneDimVec_Message2Client_2eproto.base,}};

static void InitDefaultsscc_info_MessageToClient_OneDimVec_Message2Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protobuf::_MessageToClient_OneDimVec_default_instance_;
    new (ptr) ::Protobuf::MessageToClient_OneDimVec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageToClient_OneDimVec_Message2Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageToClient_OneDimVec_Message2Client_2eproto}, {}};

static void InitDefaultsscc_info_MessageToClient_OneTeamGUIDs_Message2Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protobuf::_MessageToClient_OneTeamGUIDs_default_instance_;
    new (ptr) ::Protobuf::MessageToClient_OneTeamGUIDs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageToClient_OneTeamGUIDs_Message2Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageToClient_OneTeamGUIDs_Message2Client_2eproto}, {}};

static void InitDefaultsscc_info_MessageToOneClient_Message2Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protobuf::_MessageToOneClient_default_instance_;
    new (ptr) ::Protobuf::MessageToOneClient();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageToOneClient_Message2Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageToOneClient_Message2Client_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Message2Client_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Message2Client_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Message2Client_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Message2Client_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, gameobjtype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, guid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, x_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, y_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, facingdirection_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, movespeed_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, canmove_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, ismoving_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, shapetype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, radius_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, teamid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, ap_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, bullettype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, proptype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, islaid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, isdying_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, jobtype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, cd_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, maxbulletnum_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, bulletnum_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, maxhp_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, hp_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObjInfo, lifenum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToOneClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToOneClient, playerid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToOneClient, teamid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToOneClient, messagetype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToOneClient, guid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToOneClient, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient_OneTeamGUIDs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient_OneTeamGUIDs, teammateguids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient_OneDimVec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient_OneDimVec, rowcolors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient, playerid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient, teamid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient, messagetype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient, selfinfo_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient, selfteamcolor_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient, gameobjs_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient, playerguids_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient, cellcolors_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient, teamscore_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Protobuf::GameObjInfo)},
  { 28, -1, sizeof(::Protobuf::MessageToOneClient)},
  { 38, -1, sizeof(::Protobuf::MessageToClient_OneTeamGUIDs)},
  { 44, -1, sizeof(::Protobuf::MessageToClient_OneDimVec)},
  { 50, -1, sizeof(::Protobuf::MessageToClient)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_GameObjInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_MessageToOneClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_MessageToClient_OneTeamGUIDs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_MessageToClient_OneDimVec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_MessageToClient_default_instance_),
};

const char descriptor_table_protodef_Message2Client_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024Message2Client.proto\022\010Protobuf\032\021Messag"
  "eType.proto\"\366\003\n\013GameObjInfo\022*\n\013gameObjTy"
  "pe\030\001 \001(\0162\025.Protobuf.GameObjType\022\014\n\004guid\030"
  "\002 \001(\003\022\t\n\001x\030\003 \001(\005\022\t\n\001y\030\004 \001(\005\022\027\n\017facingDir"
  "ection\030\005 \001(\001\022\021\n\tmoveSpeed\030\006 \001(\005\022\017\n\007canMo"
  "ve\030\007 \001(\010\022\020\n\010isMoving\030\010 \001(\010\022&\n\tshapeType\030"
  "\t \001(\0162\023.Protobuf.ShapeType\022\016\n\006radius\030\n \001"
  "(\005\022\016\n\006teamID\030\013 \001(\003\022\n\n\002ap\030\014 \001(\005\022(\n\nbullet"
  "Type\030\r \001(\0162\024.Protobuf.BulletType\022$\n\010prop"
  "Type\030\016 \001(\0162\022.Protobuf.PropType\022\016\n\006isLaid"
  "\030\017 \001(\010\022\017\n\007isDying\030\020 \001(\010\022\"\n\007jobType\030\021 \001(\016"
  "2\021.Protobuf.JobType\022\n\n\002CD\030\022 \001(\005\022\024\n\014maxBu"
  "lletNum\030\023 \001(\005\022\021\n\tbulletNum\030\024 \001(\005\022\r\n\005maxH"
  "p\030\025 \001(\005\022\n\n\002hp\030\026 \001(\005\022\017\n\007lifeNum\030\027 \001(\005\"\201\001\n"
  "\022MessageToOneClient\022\020\n\010playerID\030\001 \001(\003\022\016\n"
  "\006teamID\030\002 \001(\003\022*\n\013messageType\030\003 \001(\0162\025.Pro"
  "tobuf.MessageType\022\014\n\004guid\030\004 \001(\003\022\017\n\007messa"
  "ge\030\005 \001(\t\"\302\003\n\017MessageToClient\022\020\n\010playerID"
  "\030\001 \001(\003\022\016\n\006teamID\030\002 \001(\003\022*\n\013messageType\030\003 "
  "\001(\0162\025.Protobuf.MessageType\022\'\n\010selfInfo\030\004"
  " \001(\0132\025.Protobuf.GameObjInfo\022*\n\rselfTeamC"
  "olor\030\006 \001(\0162\023.Protobuf.ColorType\022\'\n\010gameO"
  "bjs\030\007 \003(\0132\025.Protobuf.GameObjInfo\022;\n\013Play"
  "erGUIDs\030\005 \003(\0132&.Protobuf.MessageToClient"
  ".OneTeamGUIDs\0227\n\ncellColors\030\010 \003(\0132#.Prot"
  "obuf.MessageToClient.OneDimVec\022\021\n\tteamSc"
  "ore\030\t \001(\005\032%\n\014OneTeamGUIDs\022\025\n\rteammateGUI"
  "Ds\030\001 \003(\003\0323\n\tOneDimVec\022&\n\trowColors\030\001 \003(\016"
  "2\023.Protobuf.ColorType*a\n\013GameObjType\022\r\n\t"
  "Character\020\000\022\010\n\004Wall\020\001\022\010\n\004Prop\020\002\022\n\n\006Bulle"
  "t\020\003\022\016\n\nBirthPoint\020\004\022\023\n\017OutOfBoundBlock\020\005"
  "*\230\001\n\010PropType\022\010\n\004Null\020\000\022\010\n\004Bike\020\001\022\r\n\tAmp"
  "lifier\020\002\022\013\n\007JinKeLa\020\003\022\010\n\004Rice\020\004\022\024\n\020Negat"
  "iveFeedback\020\005\022\t\n\005Totem\020\006\022\n\n\006Phaser\020\007\022\010\n\004"
  "Dirt\020\010\022\016\n\nAttenuator\020\t\022\013\n\007Divider\020\n*#\n\tS"
  "hapeType\022\n\n\006Circle\020\000\022\n\n\006Square\020\001*O\n\007JobT"
  "ype\022\010\n\004Job0\020\000\022\010\n\004Job1\020\001\022\010\n\004Job2\020\002\022\010\n\004Job"
  "3\020\003\022\010\n\004Job4\020\004\022\010\n\004Job5\020\005\022\010\n\004Job6\020\006*g\n\nBul"
  "letType\022\013\n\007Bullet0\020\000\022\013\n\007Bullet1\020\001\022\013\n\007Bul"
  "let2\020\002\022\013\n\007Bullet3\020\003\022\013\n\007Bullet4\020\004\022\013\n\007Bull"
  "et5\020\005\022\013\n\007Bullet6\020\006*E\n\tColorType\022\010\n\004None\020"
  "\000\022\n\n\006Color1\020\001\022\n\n\006Color2\020\002\022\n\n\006Color3\020\003\022\n\n"
  "\006Color4\020\004B\026\252\002\023Communication.Protob\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Message2Client_2eproto_deps[1] = {
  &::descriptor_table_MessageType_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Message2Client_2eproto_sccs[5] = {
  &scc_info_GameObjInfo_Message2Client_2eproto.base,
  &scc_info_MessageToClient_Message2Client_2eproto.base,
  &scc_info_MessageToClient_OneDimVec_Message2Client_2eproto.base,
  &scc_info_MessageToClient_OneTeamGUIDs_Message2Client_2eproto.base,
  &scc_info_MessageToOneClient_Message2Client_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Message2Client_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message2Client_2eproto = {
  false, false, descriptor_table_protodef_Message2Client_2eproto, "Message2Client.proto", 1721,
  &descriptor_table_Message2Client_2eproto_once, descriptor_table_Message2Client_2eproto_sccs, descriptor_table_Message2Client_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_Message2Client_2eproto::offsets,
  file_level_metadata_Message2Client_2eproto, 5, file_level_enum_descriptors_Message2Client_2eproto, file_level_service_descriptors_Message2Client_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Message2Client_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Message2Client_2eproto)), true);
namespace Protobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameObjType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Message2Client_2eproto);
  return file_level_enum_descriptors_Message2Client_2eproto[0];
}
bool GameObjType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Message2Client_2eproto);
  return file_level_enum_descriptors_Message2Client_2eproto[1];
}
bool PropType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShapeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Message2Client_2eproto);
  return file_level_enum_descriptors_Message2Client_2eproto[2];
}
bool ShapeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Message2Client_2eproto);
  return file_level_enum_descriptors_Message2Client_2eproto[3];
}
bool JobType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BulletType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Message2Client_2eproto);
  return file_level_enum_descriptors_Message2Client_2eproto[4];
}
bool BulletType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ColorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Message2Client_2eproto);
  return file_level_enum_descriptors_Message2Client_2eproto[5];
}
bool ColorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GameObjInfo::_Internal {
 public:
};

GameObjInfo::GameObjInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protobuf.GameObjInfo)
}
GameObjInfo::GameObjInfo(const GameObjInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lifenum_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(lifenum_));
  // @@protoc_insertion_point(copy_constructor:Protobuf.GameObjInfo)
}

void GameObjInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&guid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lifenum_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(lifenum_));
}

GameObjInfo::~GameObjInfo() {
  // @@protoc_insertion_point(destructor:Protobuf.GameObjInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameObjInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameObjInfo::ArenaDtor(void* object) {
  GameObjInfo* _this = reinterpret_cast< GameObjInfo* >(object);
  (void)_this;
}
void GameObjInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameObjInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameObjInfo& GameObjInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameObjInfo_Message2Client_2eproto.base);
  return *internal_default_instance();
}


void GameObjInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.GameObjInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lifenum_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(lifenum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameObjInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Protobuf.GameObjType gameObjType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gameobjtype(static_cast<::Protobuf::GameObjType>(val));
        } else goto handle_unusual;
        continue;
      // int64 guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          x_ = static_cast<uint32_t>(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          y_ = static_cast<uint32_t>(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double facingDirection = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          facingdirection_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 moveSpeed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          movespeed_ = static_cast<uint32_t>(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool canMove = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          canmove_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isMoving = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ismoving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protobuf.ShapeType shapeType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_shapetype(static_cast<::Protobuf::ShapeType>(val));
        } else goto handle_unusual;
        continue;
      // int32 radius = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          radius_ = static_cast<uint32_t>(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 teamID = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ap = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ap_ = static_cast<uint32_t>(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protobuf.BulletType bulletType = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bullettype(static_cast<::Protobuf::BulletType>(val));
        } else goto handle_unusual;
        continue;
      // .Protobuf.PropType propType = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_proptype(static_cast<::Protobuf::PropType>(val));
        } else goto handle_unusual;
        continue;
      // bool isLaid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          islaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isDying = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          isdying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protobuf.JobType jobType = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_jobtype(static_cast<::Protobuf::JobType>(val));
        } else goto handle_unusual;
        continue;
      // int32 CD = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          cd_ = static_cast<uint32_t>(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxBulletNum = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          maxbulletnum_ = static_cast<uint32_t>(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bulletNum = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          bulletnum_ = static_cast<uint32_t>(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxHp = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          maxhp_ = static_cast<uint32_t>(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hp = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          hp_ = static_cast<uint32_t>(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lifeNum = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          lifenum_ = static_cast<uint32_t>(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameObjInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.GameObjInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protobuf.GameObjType gameObjType = 1;
  if (this->gameobjtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gameobjtype(), target);
  }

  // int64 guid = 2;
  if (this->guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_guid(), target);
  }

  // int32 x = 3;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // int32 y = 4;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  // double facingDirection = 5;
  if (!(this->facingdirection() <= 0 && this->facingdirection() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_facingdirection(), target);
  }

  // int32 moveSpeed = 6;
  if (this->movespeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_movespeed(), target);
  }

  // bool canMove = 7;
  if (this->canmove() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_canmove(), target);
  }

  // bool isMoving = 8;
  if (this->ismoving() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_ismoving(), target);
  }

  // .Protobuf.ShapeType shapeType = 9;
  if (this->shapetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_shapetype(), target);
  }

  // int32 radius = 10;
  if (this->radius() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_radius(), target);
  }

  // int64 teamID = 11;
  if (this->teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_teamid(), target);
  }

  // int32 ap = 12;
  if (this->ap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_ap(), target);
  }

  // .Protobuf.BulletType bulletType = 13;
  if (this->bullettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_bullettype(), target);
  }

  // .Protobuf.PropType propType = 14;
  if (this->proptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_proptype(), target);
  }

  // bool isLaid = 15;
  if (this->islaid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_islaid(), target);
  }

  // bool isDying = 16;
  if (this->isdying() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_isdying(), target);
  }

  // .Protobuf.JobType jobType = 17;
  if (this->jobtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_jobtype(), target);
  }

  // int32 CD = 18;
  if (this->cd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_cd(), target);
  }

  // int32 maxBulletNum = 19;
  if (this->maxbulletnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_maxbulletnum(), target);
  }

  // int32 bulletNum = 20;
  if (this->bulletnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_bulletnum(), target);
  }

  // int32 maxHp = 21;
  if (this->maxhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_maxhp(), target);
  }

  // int32 hp = 22;
  if (this->hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_hp(), target);
  }

  // int32 lifeNum = 23;
  if (this->lifenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_lifenum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.GameObjInfo)
  return target;
}

size_t GameObjInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.GameObjInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 guid = 2;
  if (this->guid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_guid());
  }

  // .Protobuf.GameObjType gameObjType = 1;
  if (this->gameobjtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gameobjtype());
  }

  // int32 x = 3;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // double facingDirection = 5;
  if (!(this->facingdirection() <= 0 && this->facingdirection() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 y = 4;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // int32 moveSpeed = 6;
  if (this->movespeed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_movespeed());
  }

  // .Protobuf.ShapeType shapeType = 9;
  if (this->shapetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_shapetype());
  }

  // int32 radius = 10;
  if (this->radius() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_radius());
  }

  // int64 teamID = 11;
  if (this->teamid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_teamid());
  }

  // bool canMove = 7;
  if (this->canmove() != 0) {
    total_size += 1 + 1;
  }

  // bool isMoving = 8;
  if (this->ismoving() != 0) {
    total_size += 1 + 1;
  }

  // bool isLaid = 15;
  if (this->islaid() != 0) {
    total_size += 1 + 1;
  }

  // bool isDying = 16;
  if (this->isdying() != 0) {
    total_size += 2 + 1;
  }

  // int32 ap = 12;
  if (this->ap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ap());
  }

  // .Protobuf.BulletType bulletType = 13;
  if (this->bullettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bullettype());
  }

  // .Protobuf.PropType propType = 14;
  if (this->proptype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_proptype());
  }

  // .Protobuf.JobType jobType = 17;
  if (this->jobtype() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_jobtype());
  }

  // int32 CD = 18;
  if (this->cd() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cd());
  }

  // int32 maxBulletNum = 19;
  if (this->maxbulletnum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxbulletnum());
  }

  // int32 bulletNum = 20;
  if (this->bulletnum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bulletnum());
  }

  // int32 maxHp = 21;
  if (this->maxhp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxhp());
  }

  // int32 hp = 22;
  if (this->hp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hp());
  }

  // int32 lifeNum = 23;
  if (this->lifenum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lifenum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameObjInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.GameObjInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameObjInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameObjInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.GameObjInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.GameObjInfo)
    MergeFrom(*source);
  }
}

void GameObjInfo::MergeFrom(const GameObjInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.GameObjInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    _internal_set_guid(from._internal_guid());
  }
  if (from.gameobjtype() != 0) {
    _internal_set_gameobjtype(from._internal_gameobjtype());
  }
  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.facingdirection() <= 0 && from.facingdirection() >= 0)) {
    _internal_set_facingdirection(from._internal_facingdirection());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.movespeed() != 0) {
    _internal_set_movespeed(from._internal_movespeed());
  }
  if (from.shapetype() != 0) {
    _internal_set_shapetype(from._internal_shapetype());
  }
  if (from.radius() != 0) {
    _internal_set_radius(from._internal_radius());
  }
  if (from.teamid() != 0) {
    _internal_set_teamid(from._internal_teamid());
  }
  if (from.canmove() != 0) {
    _internal_set_canmove(from._internal_canmove());
  }
  if (from.ismoving() != 0) {
    _internal_set_ismoving(from._internal_ismoving());
  }
  if (from.islaid() != 0) {
    _internal_set_islaid(from._internal_islaid());
  }
  if (from.isdying() != 0) {
    _internal_set_isdying(from._internal_isdying());
  }
  if (from.ap() != 0) {
    _internal_set_ap(from._internal_ap());
  }
  if (from.bullettype() != 0) {
    _internal_set_bullettype(from._internal_bullettype());
  }
  if (from.proptype() != 0) {
    _internal_set_proptype(from._internal_proptype());
  }
  if (from.jobtype() != 0) {
    _internal_set_jobtype(from._internal_jobtype());
  }
  if (from.cd() != 0) {
    _internal_set_cd(from._internal_cd());
  }
  if (from.maxbulletnum() != 0) {
    _internal_set_maxbulletnum(from._internal_maxbulletnum());
  }
  if (from.bulletnum() != 0) {
    _internal_set_bulletnum(from._internal_bulletnum());
  }
  if (from.maxhp() != 0) {
    _internal_set_maxhp(from._internal_maxhp());
  }
  if (from.hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from.lifenum() != 0) {
    _internal_set_lifenum(from._internal_lifenum());
  }
}

void GameObjInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.GameObjInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameObjInfo::CopyFrom(const GameObjInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.GameObjInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameObjInfo::IsInitialized() const {
  return true;
}

void GameObjInfo::InternalSwap(GameObjInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameObjInfo, lifenum_)
      + sizeof(GameObjInfo::lifenum_)
      - PROTOBUF_FIELD_OFFSET(GameObjInfo, guid_)>(
          reinterpret_cast<char*>(&guid_),
          reinterpret_cast<char*>(&other->guid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameObjInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageToOneClient::_Internal {
 public:
};

MessageToOneClient::MessageToOneClient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protobuf.MessageToOneClient)
}
MessageToOneClient::MessageToOneClient(const MessageToOneClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&messagetype_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(messagetype_));
  // @@protoc_insertion_point(copy_constructor:Protobuf.MessageToOneClient)
}

void MessageToOneClient::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageToOneClient_Message2Client_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&messagetype_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(messagetype_));
}

MessageToOneClient::~MessageToOneClient() {
  // @@protoc_insertion_point(destructor:Protobuf.MessageToOneClient)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageToOneClient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageToOneClient::ArenaDtor(void* object) {
  MessageToOneClient* _this = reinterpret_cast< MessageToOneClient* >(object);
  (void)_this;
}
void MessageToOneClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageToOneClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageToOneClient& MessageToOneClient::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageToOneClient_Message2Client_2eproto.base);
  return *internal_default_instance();
}


void MessageToOneClient::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.MessageToOneClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&messagetype_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(messagetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageToOneClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 teamID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protobuf.MessageType messageType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::Protobuf::MessageType>(val));
        } else goto handle_unusual;
        continue;
      // int64 guid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protobuf.MessageToOneClient.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageToOneClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.MessageToOneClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 playerID = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_playerid(), target);
  }

  // int64 teamID = 2;
  if (this->teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_teamid(), target);
  }

  // .Protobuf.MessageType messageType = 3;
  if (this->messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_messagetype(), target);
  }

  // int64 guid = 4;
  if (this->guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_guid(), target);
  }

  // string message = 5;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protobuf.MessageToOneClient.message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.MessageToOneClient)
  return target;
}

size_t MessageToOneClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.MessageToOneClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 5;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int64 playerID = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_playerid());
  }

  // int64 teamID = 2;
  if (this->teamid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_teamid());
  }

  // int64 guid = 4;
  if (this->guid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_guid());
  }

  // .Protobuf.MessageType messageType = 3;
  if (this->messagetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageToOneClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.MessageToOneClient)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageToOneClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageToOneClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.MessageToOneClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.MessageToOneClient)
    MergeFrom(*source);
  }
}

void MessageToOneClient::MergeFrom(const MessageToOneClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.MessageToOneClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.teamid() != 0) {
    _internal_set_teamid(from._internal_teamid());
  }
  if (from.guid() != 0) {
    _internal_set_guid(from._internal_guid());
  }
  if (from.messagetype() != 0) {
    _internal_set_messagetype(from._internal_messagetype());
  }
}

void MessageToOneClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.MessageToOneClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageToOneClient::CopyFrom(const MessageToOneClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.MessageToOneClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToOneClient::IsInitialized() const {
  return true;
}

void MessageToOneClient::InternalSwap(MessageToOneClient* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageToOneClient, messagetype_)
      + sizeof(MessageToOneClient::messagetype_)
      - PROTOBUF_FIELD_OFFSET(MessageToOneClient, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageToOneClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageToClient_OneTeamGUIDs::_Internal {
 public:
};

MessageToClient_OneTeamGUIDs::MessageToClient_OneTeamGUIDs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  teammateguids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protobuf.MessageToClient.OneTeamGUIDs)
}
MessageToClient_OneTeamGUIDs::MessageToClient_OneTeamGUIDs(const MessageToClient_OneTeamGUIDs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      teammateguids_(from.teammateguids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protobuf.MessageToClient.OneTeamGUIDs)
}

void MessageToClient_OneTeamGUIDs::SharedCtor() {
}

MessageToClient_OneTeamGUIDs::~MessageToClient_OneTeamGUIDs() {
  // @@protoc_insertion_point(destructor:Protobuf.MessageToClient.OneTeamGUIDs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageToClient_OneTeamGUIDs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MessageToClient_OneTeamGUIDs::ArenaDtor(void* object) {
  MessageToClient_OneTeamGUIDs* _this = reinterpret_cast< MessageToClient_OneTeamGUIDs* >(object);
  (void)_this;
}
void MessageToClient_OneTeamGUIDs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageToClient_OneTeamGUIDs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageToClient_OneTeamGUIDs& MessageToClient_OneTeamGUIDs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageToClient_OneTeamGUIDs_Message2Client_2eproto.base);
  return *internal_default_instance();
}


void MessageToClient_OneTeamGUIDs::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.MessageToClient.OneTeamGUIDs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teammateguids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageToClient_OneTeamGUIDs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 teammateGUIDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_teammateguids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_teammateguids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageToClient_OneTeamGUIDs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.MessageToClient.OneTeamGUIDs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 teammateGUIDs = 1;
  {
    int byte_size = _teammateguids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_teammateguids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.MessageToClient.OneTeamGUIDs)
  return target;
}

size_t MessageToClient_OneTeamGUIDs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.MessageToClient.OneTeamGUIDs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 teammateGUIDs = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->teammateguids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _teammateguids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageToClient_OneTeamGUIDs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.MessageToClient.OneTeamGUIDs)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageToClient_OneTeamGUIDs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageToClient_OneTeamGUIDs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.MessageToClient.OneTeamGUIDs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.MessageToClient.OneTeamGUIDs)
    MergeFrom(*source);
  }
}

void MessageToClient_OneTeamGUIDs::MergeFrom(const MessageToClient_OneTeamGUIDs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.MessageToClient.OneTeamGUIDs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teammateguids_.MergeFrom(from.teammateguids_);
}

void MessageToClient_OneTeamGUIDs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.MessageToClient.OneTeamGUIDs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageToClient_OneTeamGUIDs::CopyFrom(const MessageToClient_OneTeamGUIDs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.MessageToClient.OneTeamGUIDs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToClient_OneTeamGUIDs::IsInitialized() const {
  return true;
}

void MessageToClient_OneTeamGUIDs::InternalSwap(MessageToClient_OneTeamGUIDs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  teammateguids_.InternalSwap(&other->teammateguids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageToClient_OneTeamGUIDs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageToClient_OneDimVec::_Internal {
 public:
};

MessageToClient_OneDimVec::MessageToClient_OneDimVec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rowcolors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protobuf.MessageToClient.OneDimVec)
}
MessageToClient_OneDimVec::MessageToClient_OneDimVec(const MessageToClient_OneDimVec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rowcolors_(from.rowcolors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protobuf.MessageToClient.OneDimVec)
}

void MessageToClient_OneDimVec::SharedCtor() {
}

MessageToClient_OneDimVec::~MessageToClient_OneDimVec() {
  // @@protoc_insertion_point(destructor:Protobuf.MessageToClient.OneDimVec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageToClient_OneDimVec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MessageToClient_OneDimVec::ArenaDtor(void* object) {
  MessageToClient_OneDimVec* _this = reinterpret_cast< MessageToClient_OneDimVec* >(object);
  (void)_this;
}
void MessageToClient_OneDimVec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageToClient_OneDimVec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageToClient_OneDimVec& MessageToClient_OneDimVec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageToClient_OneDimVec_Message2Client_2eproto.base);
  return *internal_default_instance();
}


void MessageToClient_OneDimVec::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.MessageToClient.OneDimVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rowcolors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageToClient_OneDimVec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Protobuf.ColorType rowColors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_rowcolors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_rowcolors(static_cast<::Protobuf::ColorType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageToClient_OneDimVec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.MessageToClient.OneDimVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protobuf.ColorType rowColors = 1;
  {
    int byte_size = _rowcolors_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, rowcolors_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.MessageToClient.OneDimVec)
  return target;
}

size_t MessageToClient_OneDimVec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.MessageToClient.OneDimVec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protobuf.ColorType rowColors = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_rowcolors_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_rowcolors(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rowcolors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageToClient_OneDimVec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.MessageToClient.OneDimVec)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageToClient_OneDimVec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageToClient_OneDimVec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.MessageToClient.OneDimVec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.MessageToClient.OneDimVec)
    MergeFrom(*source);
  }
}

void MessageToClient_OneDimVec::MergeFrom(const MessageToClient_OneDimVec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.MessageToClient.OneDimVec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rowcolors_.MergeFrom(from.rowcolors_);
}

void MessageToClient_OneDimVec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.MessageToClient.OneDimVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageToClient_OneDimVec::CopyFrom(const MessageToClient_OneDimVec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.MessageToClient.OneDimVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToClient_OneDimVec::IsInitialized() const {
  return true;
}

void MessageToClient_OneDimVec::InternalSwap(MessageToClient_OneDimVec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rowcolors_.InternalSwap(&other->rowcolors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageToClient_OneDimVec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageToClient::_Internal {
 public:
  static const ::Protobuf::GameObjInfo& selfinfo(const MessageToClient* msg);
};

const ::Protobuf::GameObjInfo&
MessageToClient::_Internal::selfinfo(const MessageToClient* msg) {
  return *msg->selfinfo_;
}
MessageToClient::MessageToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  playerguids_(arena),
  gameobjs_(arena),
  cellcolors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protobuf.MessageToClient)
}
MessageToClient::MessageToClient(const MessageToClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      playerguids_(from.playerguids_),
      gameobjs_(from.gameobjs_),
      cellcolors_(from.cellcolors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_selfinfo()) {
    selfinfo_ = new ::Protobuf::GameObjInfo(*from.selfinfo_);
  } else {
    selfinfo_ = nullptr;
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&teamscore_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(teamscore_));
  // @@protoc_insertion_point(copy_constructor:Protobuf.MessageToClient)
}

void MessageToClient::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageToClient_Message2Client_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&selfinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&teamscore_) -
      reinterpret_cast<char*>(&selfinfo_)) + sizeof(teamscore_));
}

MessageToClient::~MessageToClient() {
  // @@protoc_insertion_point(destructor:Protobuf.MessageToClient)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageToClient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete selfinfo_;
}

void MessageToClient::ArenaDtor(void* object) {
  MessageToClient* _this = reinterpret_cast< MessageToClient* >(object);
  (void)_this;
}
void MessageToClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageToClient& MessageToClient::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageToClient_Message2Client_2eproto.base);
  return *internal_default_instance();
}


void MessageToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.MessageToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerguids_.Clear();
  gameobjs_.Clear();
  cellcolors_.Clear();
  if (GetArena() == nullptr && selfinfo_ != nullptr) {
    delete selfinfo_;
  }
  selfinfo_ = nullptr;
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teamscore_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(teamscore_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageToClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 teamID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protobuf.MessageType messageType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::Protobuf::MessageType>(val));
        } else goto handle_unusual;
        continue;
      // .Protobuf.GameObjInfo selfInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_selfinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Protobuf.MessageToClient.OneTeamGUIDs PlayerGUIDs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerguids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .Protobuf.ColorType selfTeamColor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_selfteamcolor(static_cast<::Protobuf::ColorType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .Protobuf.GameObjInfo gameObjs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gameobjs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Protobuf.MessageToClient.OneDimVec cellColors = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cellcolors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 teamScore = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          teamscore_ = static_cast<uint32_t>(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageToClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.MessageToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 playerID = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_playerid(), target);
  }

  // int64 teamID = 2;
  if (this->teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_teamid(), target);
  }

  // .Protobuf.MessageType messageType = 3;
  if (this->messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_messagetype(), target);
  }

  // .Protobuf.GameObjInfo selfInfo = 4;
  if (this->has_selfinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::selfinfo(this), target, stream);
  }

  // repeated .Protobuf.MessageToClient.OneTeamGUIDs PlayerGUIDs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playerguids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_playerguids(i), target, stream);
  }

  // .Protobuf.ColorType selfTeamColor = 6;
  if (this->selfteamcolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_selfteamcolor(), target);
  }

  // repeated .Protobuf.GameObjInfo gameObjs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gameobjs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_gameobjs(i), target, stream);
  }

  // repeated .Protobuf.MessageToClient.OneDimVec cellColors = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cellcolors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_cellcolors(i), target, stream);
  }

  // int32 teamScore = 9;
  if (this->teamscore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_teamscore(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.MessageToClient)
  return target;
}

size_t MessageToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.MessageToClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protobuf.MessageToClient.OneTeamGUIDs PlayerGUIDs = 5;
  total_size += 1UL * this->_internal_playerguids_size();
  for (const auto& msg : this->playerguids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Protobuf.GameObjInfo gameObjs = 7;
  total_size += 1UL * this->_internal_gameobjs_size();
  for (const auto& msg : this->gameobjs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Protobuf.MessageToClient.OneDimVec cellColors = 8;
  total_size += 1UL * this->_internal_cellcolors_size();
  for (const auto& msg : this->cellcolors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Protobuf.GameObjInfo selfInfo = 4;
  if (this->has_selfinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selfinfo_);
  }

  // int64 playerID = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_playerid());
  }

  // int64 teamID = 2;
  if (this->teamid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_teamid());
  }

  // .Protobuf.MessageType messageType = 3;
  if (this->messagetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  // .Protobuf.ColorType selfTeamColor = 6;
  if (this->selfteamcolor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_selfteamcolor());
  }

  // int32 teamScore = 9;
  if (this->teamscore() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_teamscore());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageToClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.MessageToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageToClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageToClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.MessageToClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.MessageToClient)
    MergeFrom(*source);
  }
}

void MessageToClient::MergeFrom(const MessageToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.MessageToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerguids_.MergeFrom(from.playerguids_);
  gameobjs_.MergeFrom(from.gameobjs_);
  cellcolors_.MergeFrom(from.cellcolors_);
  if (from.has_selfinfo()) {
    _internal_mutable_selfinfo()->::Protobuf::GameObjInfo::MergeFrom(from._internal_selfinfo());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.teamid() != 0) {
    _internal_set_teamid(from._internal_teamid());
  }
  if (from.messagetype() != 0) {
    _internal_set_messagetype(from._internal_messagetype());
  }
  if (from.selfteamcolor() != 0) {
    _internal_set_selfteamcolor(from._internal_selfteamcolor());
  }
  if (from.teamscore() != 0) {
    _internal_set_teamscore(from._internal_teamscore());
  }
}

void MessageToClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.MessageToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageToClient::CopyFrom(const MessageToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.MessageToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToClient::IsInitialized() const {
  return true;
}

void MessageToClient::InternalSwap(MessageToClient* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  playerguids_.InternalSwap(&other->playerguids_);
  gameobjs_.InternalSwap(&other->gameobjs_);
  cellcolors_.InternalSwap(&other->cellcolors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageToClient, teamscore_)
      + sizeof(MessageToClient::teamscore_)
      - PROTOBUF_FIELD_OFFSET(MessageToClient, selfinfo_)>(
          reinterpret_cast<char*>(&selfinfo_),
          reinterpret_cast<char*>(&other->selfinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageToClient::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protobuf::GameObjInfo* Arena::CreateMaybeMessage< ::Protobuf::GameObjInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protobuf::GameObjInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protobuf::MessageToOneClient* Arena::CreateMaybeMessage< ::Protobuf::MessageToOneClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protobuf::MessageToOneClient >(arena);
}
template<> PROTOBUF_NOINLINE ::Protobuf::MessageToClient_OneTeamGUIDs* Arena::CreateMaybeMessage< ::Protobuf::MessageToClient_OneTeamGUIDs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protobuf::MessageToClient_OneTeamGUIDs >(arena);
}
template<> PROTOBUF_NOINLINE ::Protobuf::MessageToClient_OneDimVec* Arena::CreateMaybeMessage< ::Protobuf::MessageToClient_OneDimVec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protobuf::MessageToClient_OneDimVec >(arena);
}
template<> PROTOBUF_NOINLINE ::Protobuf::MessageToClient* Arena::CreateMaybeMessage< ::Protobuf::MessageToClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protobuf::MessageToClient >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
