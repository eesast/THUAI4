// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Message2Server.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Communication.Proto {

  /// <summary>Holder for reflection information generated from Message2Server.proto</summary>
  public static partial class Message2ServerReflection {

    #region Descriptor
    /// <summary>File descriptor for Message2Server.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Message2ServerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRNZXNzYWdlMlNlcnZlci5wcm90bxIIUHJvdG9idWYaFE1lc3NhZ2UyQ2xp",
            "ZW50LnByb3RvItYBCg5NZXNzYWdlMlNlcnZlchIUCgxtb3ZlRHVyYXRpb24Y",
            "ASABKAESEQoJbW92ZUFuZ2xlGAIgASgBEhMKC2F0dGFja0FuZ2xlGAMgASgB",
            "EhAKCGlzQXR0YWNrGAQgASgIEg4KBmlzUGljaxgFIAEoCBINCgVpc1VzZRgG",
            "IAEoCBIiCgdqb2JUeXBlGAcgASgOMhEuUHJvdG9idWYuSm9iVHlwZRIOCgZ0",
            "ZWFtSWQYCCABKAUSEAoIcGxheWVySWQYCSABKAUSDwoHaXNUaHJvdxgKIAEo",
            "CEIWqgITQ29tbXVuaWNhdGlvbi5Qcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Communication.Proto.Message2ClientReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Communication.Proto.Message2Server), global::Communication.Proto.Message2Server.Parser, new[]{ "MoveDuration", "MoveAngle", "AttackAngle", "IsAttack", "IsPick", "IsUse", "JobType", "TeamId", "PlayerId", "IsThrow" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Message2Server : pb::IMessage<Message2Server> {
    private static readonly pb::MessageParser<Message2Server> _parser = new pb::MessageParser<Message2Server>(() => new Message2Server());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message2Server> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Communication.Proto.Message2ServerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message2Server() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message2Server(Message2Server other) : this() {
      moveDuration_ = other.moveDuration_;
      moveAngle_ = other.moveAngle_;
      attackAngle_ = other.attackAngle_;
      isAttack_ = other.isAttack_;
      isPick_ = other.isPick_;
      isUse_ = other.isUse_;
      jobType_ = other.jobType_;
      teamId_ = other.teamId_;
      playerId_ = other.playerId_;
      isThrow_ = other.isThrow_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message2Server Clone() {
      return new Message2Server(this);
    }

    /// <summary>Field number for the "moveDuration" field.</summary>
    public const int MoveDurationFieldNumber = 1;
    private double moveDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MoveDuration {
      get { return moveDuration_; }
      set {
        moveDuration_ = value;
      }
    }

    /// <summary>Field number for the "moveAngle" field.</summary>
    public const int MoveAngleFieldNumber = 2;
    private double moveAngle_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MoveAngle {
      get { return moveAngle_; }
      set {
        moveAngle_ = value;
      }
    }

    /// <summary>Field number for the "attackAngle" field.</summary>
    public const int AttackAngleFieldNumber = 3;
    private double attackAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AttackAngle {
      get { return attackAngle_; }
      set {
        attackAngle_ = value;
      }
    }

    /// <summary>Field number for the "isAttack" field.</summary>
    public const int IsAttackFieldNumber = 4;
    private bool isAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttack {
      get { return isAttack_; }
      set {
        isAttack_ = value;
      }
    }

    /// <summary>Field number for the "isPick" field.</summary>
    public const int IsPickFieldNumber = 5;
    private bool isPick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPick {
      get { return isPick_; }
      set {
        isPick_ = value;
      }
    }

    /// <summary>Field number for the "isUse" field.</summary>
    public const int IsUseFieldNumber = 6;
    private bool isUse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUse {
      get { return isUse_; }
      set {
        isUse_ = value;
      }
    }

    /// <summary>Field number for the "jobType" field.</summary>
    public const int JobTypeFieldNumber = 7;
    private global::Communication.Proto.JobType jobType_ = 0;
    /// <summary>
    ///只有第一条消息有效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Communication.Proto.JobType JobType {
      get { return jobType_; }
      set {
        jobType_ = value;
      }
    }

    /// <summary>Field number for the "teamId" field.</summary>
    public const int TeamIdFieldNumber = 8;
    private int teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 9;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "isThrow" field.</summary>
    public const int IsThrowFieldNumber = 10;
    private bool isThrow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsThrow {
      get { return isThrow_; }
      set {
        isThrow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message2Server);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message2Server other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MoveDuration, other.MoveDuration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MoveAngle, other.MoveAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AttackAngle, other.AttackAngle)) return false;
      if (IsAttack != other.IsAttack) return false;
      if (IsPick != other.IsPick) return false;
      if (IsUse != other.IsUse) return false;
      if (JobType != other.JobType) return false;
      if (TeamId != other.TeamId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (IsThrow != other.IsThrow) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MoveDuration != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MoveDuration);
      if (MoveAngle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MoveAngle);
      if (AttackAngle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AttackAngle);
      if (IsAttack != false) hash ^= IsAttack.GetHashCode();
      if (IsPick != false) hash ^= IsPick.GetHashCode();
      if (IsUse != false) hash ^= IsUse.GetHashCode();
      if (JobType != 0) hash ^= JobType.GetHashCode();
      if (TeamId != 0) hash ^= TeamId.GetHashCode();
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (IsThrow != false) hash ^= IsThrow.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MoveDuration != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MoveDuration);
      }
      if (MoveAngle != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MoveAngle);
      }
      if (AttackAngle != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(AttackAngle);
      }
      if (IsAttack != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsAttack);
      }
      if (IsPick != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsPick);
      }
      if (IsUse != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsUse);
      }
      if (JobType != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) JobType);
      }
      if (TeamId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TeamId);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PlayerId);
      }
      if (IsThrow != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsThrow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MoveDuration != 0D) {
        size += 1 + 8;
      }
      if (MoveAngle != 0D) {
        size += 1 + 8;
      }
      if (AttackAngle != 0D) {
        size += 1 + 8;
      }
      if (IsAttack != false) {
        size += 1 + 1;
      }
      if (IsPick != false) {
        size += 1 + 1;
      }
      if (IsUse != false) {
        size += 1 + 1;
      }
      if (JobType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) JobType);
      }
      if (TeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamId);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (IsThrow != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message2Server other) {
      if (other == null) {
        return;
      }
      if (other.MoveDuration != 0D) {
        MoveDuration = other.MoveDuration;
      }
      if (other.MoveAngle != 0D) {
        MoveAngle = other.MoveAngle;
      }
      if (other.AttackAngle != 0D) {
        AttackAngle = other.AttackAngle;
      }
      if (other.IsAttack != false) {
        IsAttack = other.IsAttack;
      }
      if (other.IsPick != false) {
        IsPick = other.IsPick;
      }
      if (other.IsUse != false) {
        IsUse = other.IsUse;
      }
      if (other.JobType != 0) {
        JobType = other.JobType;
      }
      if (other.TeamId != 0) {
        TeamId = other.TeamId;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.IsThrow != false) {
        IsThrow = other.IsThrow;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            MoveDuration = input.ReadDouble();
            break;
          }
          case 17: {
            MoveAngle = input.ReadDouble();
            break;
          }
          case 25: {
            AttackAngle = input.ReadDouble();
            break;
          }
          case 32: {
            IsAttack = input.ReadBool();
            break;
          }
          case 40: {
            IsPick = input.ReadBool();
            break;
          }
          case 48: {
            IsUse = input.ReadBool();
            break;
          }
          case 56: {
            JobType = (global::Communication.Proto.JobType) input.ReadEnum();
            break;
          }
          case 64: {
            TeamId = input.ReadInt32();
            break;
          }
          case 72: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 80: {
            IsThrow = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
