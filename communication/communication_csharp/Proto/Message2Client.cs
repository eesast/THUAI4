// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Message2Client.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Communication.Proto
{

    /// <summary>Holder for reflection information generated from Message2Client.proto</summary>
    public static partial class Message2ClientReflection
    {

        #region Descriptor
        /// <summary>File descriptor for Message2Client.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static Message2ClientReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChRNZXNzYWdlMkNsaWVudC5wcm90bxIIUHJvdG9idWYi1gIKCkdhbWVPYmpl",
                  "Y3QSCQoBeBgBIAEoARIJCgF5GAIgASgBEgoKAmhwGAMgASgFEhEKCW1vdmVT",
                  "cGVlZBgEIAEoBRIRCglidWxsZXROdW0YBSABKAUSIgoHT2JqVHlwZRgGIAEo",
                  "DjIRLlByb3RvYnVmLk9ialR5cGUSJAoIUHJvcFR5cGUYByABKA4yEi5Qcm90",
                  "b2J1Zi5Qcm9wVHlwZRIoCgpCdWxsZXRUeXBlGAggASgOMhQuUHJvdG9idWYu",
                  "QnVsbGV0VHlwZRIiCgdKb2JUeXBlGAkgASgOMhEuUHJvdG9idWYuSm9iVHlw",
                  "ZRIOCgZ0ZWFtSWQYCiABKAUSEAoIcGxheWVySWQYCyABKAUSDgoGZGFtYWdl",
                  "GAwgASgFEhMKC2ZhY2luZ0FuZ2xlGA0gASgBEiEKBWJ1ZmZzGA4gAygOMhIu",
                  "UHJvdG9idWYuQnVmZlR5cGUiMAoITWFwQ29sb3ISCQoBeBgBIAEoBRIJCgF5",
                  "GAIgASgFEg4KBnRlYW1JZBgDIAEoBSLKAQoOTWVzc2FnZTJDbGllbnQSRAoO",
                  "Z2FtZU9iamVjdExpc3QYASADKAsyLC5Qcm90b2J1Zi5NZXNzYWdlMkNsaWVu",
                  "dC5HYW1lT2JqZWN0TGlzdEVudHJ5EiUKCU1hcENvbG9ycxgCIAMoCzISLlBy",
                  "b3RvYnVmLk1hcENvbG9yGksKE0dhbWVPYmplY3RMaXN0RW50cnkSCwoDa2V5",
                  "GAEgASgDEiMKBXZhbHVlGAIgASgLMhQuUHJvdG9idWYuR2FtZU9iamVjdDoC",
                  "OAEqNQoHT2JqVHlwZRIKCgZwbGF5ZXIQABIICgR3YWxsEAESCAoEcHJvcBAC",
                  "EgoKBmJ1bGxldBADKisKCFByb3BUeXBlEgkKBXByb3AxEAASCQoFcHJvcDIQ",
                  "ARIJCgVwcm9wMxACKjMKCkJ1bGxldFR5cGUSCwoHYnVsbGV0MRAAEgsKB2J1",
                  "bGxldDIQARILCgdidWxsZXQzEAIqdQoIQnVmZlR5cGUSDgoKaGF2ZVNoaWVs",
                  "ZBAAEhAKDGhhdmVGdWh1b2ppYRABEgsKB3NwZWVkVXAQAhINCglzcGVlZERv",
                  "d24QAxIMCghkYW1hZ2VVcBAEEg4KCmRhbWFnZURvd24QBRINCglpc1N0dW5u",
                  "ZWQQBionCgdKb2JUeXBlEggKBGpvYjEQABIICgRqb2IyEAESCAoEam9iMxAC",
                  "QhaqAhNDdW1tdW5pY2F0aW9uLlByb3RvYgZwcm90bzM="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(new[] { typeof(global::Communication.Proto.ObjType), typeof(global::Communication.Proto.PropType), typeof(global::Communication.Proto.BulletType), typeof(global::Communication.Proto.BuffType), typeof(global::Communication.Proto.JobType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Communication.Proto.GameObject), global::Communication.Proto.GameObject.Parser, new[]{ "X", "Y", "Hp", "MoveSpeed", "BulletNum", "ObjType", "PropType", "BulletType", "JobType", "TeamId", "PlayerId", "Damage", "FacingAngle", "Buffs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Communication.Proto.MapColor), global::Communication.Proto.MapColor.Parser, new[]{ "X", "Y", "TeamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Communication.Proto.Message2Client), global::Communication.Proto.Message2Client.Parser, new[]{ "GameObjectList", "MapColors" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
                }));
        }
        #endregion

    }
    #region Enums
    public enum ObjType
    {
        [pbr::OriginalName("player")] Player = 0,
        [pbr::OriginalName("wall")] Wall = 1,
        [pbr::OriginalName("prop")] Prop = 2,
        [pbr::OriginalName("bullet")] Bullet = 3,
    }

    public enum PropType
    {
        [pbr::OriginalName("prop1")] Prop1 = 0,
        [pbr::OriginalName("prop2")] Prop2 = 1,
        [pbr::OriginalName("prop3")] Prop3 = 2,
    }

    public enum BulletType
    {
        [pbr::OriginalName("bullet1")] Bullet1 = 0,
        [pbr::OriginalName("bullet2")] Bullet2 = 1,
        [pbr::OriginalName("bullet3")] Bullet3 = 2,
    }

    public enum BuffType
    {
        [pbr::OriginalName("haveShield")] HaveShield = 0,
        [pbr::OriginalName("haveFuhuojia")] HaveFuhuojia = 1,
        [pbr::OriginalName("speedUp")] SpeedUp = 2,
        [pbr::OriginalName("speedDown")] SpeedDown = 3,
        [pbr::OriginalName("damageUp")] DamageUp = 4,
        [pbr::OriginalName("damageDown")] DamageDown = 5,
        [pbr::OriginalName("isStunned")] IsStunned = 6,
    }

    public enum JobType
    {
        [pbr::OriginalName("job1")] Job1 = 0,
        [pbr::OriginalName("job2")] Job2 = 1,
        [pbr::OriginalName("job3")] Job3 = 2,
    }

    #endregion

    #region Messages
    public sealed partial class GameObject : pb::IMessage<GameObject>
    {
        private static readonly pb::MessageParser<GameObject> _parser = new pb::MessageParser<GameObject>(() => new GameObject());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameObject> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Communication.Proto.Message2ClientReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameObject()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameObject(GameObject other) : this()
        {
            x_ = other.x_;
            y_ = other.y_;
            hp_ = other.hp_;
            moveSpeed_ = other.moveSpeed_;
            bulletNum_ = other.bulletNum_;
            objType_ = other.objType_;
            propType_ = other.propType_;
            bulletType_ = other.bulletType_;
            jobType_ = other.jobType_;
            teamId_ = other.teamId_;
            playerId_ = other.playerId_;
            damage_ = other.damage_;
            facingAngle_ = other.facingAngle_;
            buffs_ = other.buffs_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameObject Clone()
        {
            return new GameObject(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private double x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double X
        {
            get { return x_; }
            set
            {
                x_ = value;
            }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private double y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Y
        {
            get { return y_; }
            set
            {
                y_ = value;
            }
        }

        /// <summary>Field number for the "hp" field.</summary>
        public const int HpFieldNumber = 3;
        private int hp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Hp
        {
            get { return hp_; }
            set
            {
                hp_ = value;
            }
        }

        /// <summary>Field number for the "moveSpeed" field.</summary>
        public const int MoveSpeedFieldNumber = 4;
        private int moveSpeed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MoveSpeed
        {
            get { return moveSpeed_; }
            set
            {
                moveSpeed_ = value;
            }
        }

        /// <summary>Field number for the "bulletNum" field.</summary>
        public const int BulletNumFieldNumber = 5;
        private int bulletNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BulletNum
        {
            get { return bulletNum_; }
            set
            {
                bulletNum_ = value;
            }
        }

        /// <summary>Field number for the "ObjType" field.</summary>
        public const int ObjTypeFieldNumber = 6;
        private global::Communication.Proto.ObjType objType_ = 0;
        /// <summary>
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Communication.Proto.ObjType ObjType
        {
            get { return objType_; }
            set
            {
                objType_ = value;
            }
        }

        /// <summary>Field number for the "PropType" field.</summary>
        public const int PropTypeFieldNumber = 7;
        private global::Communication.Proto.PropType propType_ = 0;
        /// <summary>
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Communication.Proto.PropType PropType
        {
            get { return propType_; }
            set
            {
                propType_ = value;
            }
        }

        /// <summary>Field number for the "BulletType" field.</summary>
        public const int BulletTypeFieldNumber = 8;
        private global::Communication.Proto.BulletType bulletType_ = 0;
        /// <summary>
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Communication.Proto.BulletType BulletType
        {
            get { return bulletType_; }
            set
            {
                bulletType_ = value;
            }
        }

        /// <summary>Field number for the "JobType" field.</summary>
        public const int JobTypeFieldNumber = 9;
        private global::Communication.Proto.JobType jobType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Communication.Proto.JobType JobType
        {
            get { return jobType_; }
            set
            {
                jobType_ = value;
            }
        }

        /// <summary>Field number for the "teamId" field.</summary>
        public const int TeamIdFieldNumber = 10;
        private int teamId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TeamId
        {
            get { return teamId_; }
            set
            {
                teamId_ = value;
            }
        }

        /// <summary>Field number for the "playerId" field.</summary>
        public const int PlayerIdFieldNumber = 11;
        private int playerId_;
        /// <summary>
        ///区分队内id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerId
        {
            get { return playerId_; }
            set
            {
                playerId_ = value;
            }
        }

        /// <summary>Field number for the "damage" field.</summary>
        public const int DamageFieldNumber = 12;
        private int damage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Damage
        {
            get { return damage_; }
            set
            {
                damage_ = value;
            }
        }

        /// <summary>Field number for the "facingAngle" field.</summary>
        public const int FacingAngleFieldNumber = 13;
        private double facingAngle_;
        /// <summary>
        ///面对的方向,rad
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double FacingAngle
        {
            get { return facingAngle_; }
            set
            {
                facingAngle_ = value;
            }
        }

        /// <summary>Field number for the "buffs" field.</summary>
        public const int BuffsFieldNumber = 14;
        private static readonly pb::FieldCodec<global::Communication.Proto.BuffType> _repeated_buffs_codec
            = pb::FieldCodec.ForEnum(114, x => (int)x, x => (global::Communication.Proto.BuffType)x);
        private readonly pbc::RepeatedField<global::Communication.Proto.BuffType> buffs_ = new pbc::RepeatedField<global::Communication.Proto.BuffType>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Communication.Proto.BuffType> Buffs
        {
            get { return buffs_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GameObject);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameObject other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
            if (Hp != other.Hp) return false;
            if (MoveSpeed != other.MoveSpeed) return false;
            if (BulletNum != other.BulletNum) return false;
            if (ObjType != other.ObjType) return false;
            if (PropType != other.PropType) return false;
            if (BulletType != other.BulletType) return false;
            if (JobType != other.JobType) return false;
            if (TeamId != other.TeamId) return false;
            if (PlayerId != other.PlayerId) return false;
            if (Damage != other.Damage) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FacingAngle, other.FacingAngle)) return false;
            if (!buffs_.Equals(other.buffs_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
            if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
            if (Hp != 0) hash ^= Hp.GetHashCode();
            if (MoveSpeed != 0) hash ^= MoveSpeed.GetHashCode();
            if (BulletNum != 0) hash ^= BulletNum.GetHashCode();
            if (ObjType != 0) hash ^= ObjType.GetHashCode();
            if (PropType != 0) hash ^= PropType.GetHashCode();
            if (BulletType != 0) hash ^= BulletType.GetHashCode();
            if (JobType != 0) hash ^= JobType.GetHashCode();
            if (TeamId != 0) hash ^= TeamId.GetHashCode();
            if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
            if (Damage != 0) hash ^= Damage.GetHashCode();
            if (FacingAngle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FacingAngle);
            hash ^= buffs_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (X != 0D)
            {
                output.WriteRawTag(9);
                output.WriteDouble(X);
            }
            if (Y != 0D)
            {
                output.WriteRawTag(17);
                output.WriteDouble(Y);
            }
            if (Hp != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(Hp);
            }
            if (MoveSpeed != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(MoveSpeed);
            }
            if (BulletNum != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(BulletNum);
            }
            if (ObjType != 0)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)ObjType);
            }
            if (PropType != 0)
            {
                output.WriteRawTag(56);
                output.WriteEnum((int)PropType);
            }
            if (BulletType != 0)
            {
                output.WriteRawTag(64);
                output.WriteEnum((int)BulletType);
            }
            if (JobType != 0)
            {
                output.WriteRawTag(72);
                output.WriteEnum((int)JobType);
            }
            if (TeamId != 0)
            {
                output.WriteRawTag(80);
                output.WriteInt32(TeamId);
            }
            if (PlayerId != 0)
            {
                output.WriteRawTag(88);
                output.WriteInt32(PlayerId);
            }
            if (Damage != 0)
            {
                output.WriteRawTag(96);
                output.WriteInt32(Damage);
            }
            if (FacingAngle != 0D)
            {
                output.WriteRawTag(105);
                output.WriteDouble(FacingAngle);
            }
            buffs_.WriteTo(output, _repeated_buffs_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (X != 0D)
            {
                size += 1 + 8;
            }
            if (Y != 0D)
            {
                size += 1 + 8;
            }
            if (Hp != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
            }
            if (MoveSpeed != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeed);
            }
            if (BulletNum != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletNum);
            }
            if (ObjType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ObjType);
            }
            if (PropType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)PropType);
            }
            if (BulletType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)BulletType);
            }
            if (JobType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)JobType);
            }
            if (TeamId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamId);
            }
            if (PlayerId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
            }
            if (Damage != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
            }
            if (FacingAngle != 0D)
            {
                size += 1 + 8;
            }
            size += buffs_.CalculateSize(_repeated_buffs_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameObject other)
        {
            if (other == null)
            {
                return;
            }
            if (other.X != 0D)
            {
                X = other.X;
            }
            if (other.Y != 0D)
            {
                Y = other.Y;
            }
            if (other.Hp != 0)
            {
                Hp = other.Hp;
            }
            if (other.MoveSpeed != 0)
            {
                MoveSpeed = other.MoveSpeed;
            }
            if (other.BulletNum != 0)
            {
                BulletNum = other.BulletNum;
            }
            if (other.ObjType != 0)
            {
                ObjType = other.ObjType;
            }
            if (other.PropType != 0)
            {
                PropType = other.PropType;
            }
            if (other.BulletType != 0)
            {
                BulletType = other.BulletType;
            }
            if (other.JobType != 0)
            {
                JobType = other.JobType;
            }
            if (other.TeamId != 0)
            {
                TeamId = other.TeamId;
            }
            if (other.PlayerId != 0)
            {
                PlayerId = other.PlayerId;
            }
            if (other.Damage != 0)
            {
                Damage = other.Damage;
            }
            if (other.FacingAngle != 0D)
            {
                FacingAngle = other.FacingAngle;
            }
            buffs_.Add(other.buffs_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 9:
                        {
                            X = input.ReadDouble();
                            break;
                        }
                    case 17:
                        {
                            Y = input.ReadDouble();
                            break;
                        }
                    case 24:
                        {
                            Hp = input.ReadInt32();
                            break;
                        }
                    case 32:
                        {
                            MoveSpeed = input.ReadInt32();
                            break;
                        }
                    case 40:
                        {
                            BulletNum = input.ReadInt32();
                            break;
                        }
                    case 48:
                        {
                            ObjType = (global::Communication.Proto.ObjType)input.ReadEnum();
                            break;
                        }
                    case 56:
                        {
                            PropType = (global::Communication.Proto.PropType)input.ReadEnum();
                            break;
                        }
                    case 64:
                        {
                            BulletType = (global::Communication.Proto.BulletType)input.ReadEnum();
                            break;
                        }
                    case 72:
                        {
                            JobType = (global::Communication.Proto.JobType)input.ReadEnum();
                            break;
                        }
                    case 80:
                        {
                            TeamId = input.ReadInt32();
                            break;
                        }
                    case 88:
                        {
                            PlayerId = input.ReadInt32();
                            break;
                        }
                    case 96:
                        {
                            Damage = input.ReadInt32();
                            break;
                        }
                    case 105:
                        {
                            FacingAngle = input.ReadDouble();
                            break;
                        }
                    case 114:
                    case 112:
                        {
                            buffs_.AddEntriesFrom(input, _repeated_buffs_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MapColor : pb::IMessage<MapColor>
    {
        private static readonly pb::MessageParser<MapColor> _parser = new pb::MessageParser<MapColor>(() => new MapColor());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MapColor> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Communication.Proto.Message2ClientReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapColor()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapColor(MapColor other) : this()
        {
            x_ = other.x_;
            y_ = other.y_;
            teamId_ = other.teamId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapColor Clone()
        {
            return new MapColor(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private int x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int X
        {
            get { return x_; }
            set
            {
                x_ = value;
            }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private int y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Y
        {
            get { return y_; }
            set
            {
                y_ = value;
            }
        }

        /// <summary>Field number for the "teamId" field.</summary>
        public const int TeamIdFieldNumber = 3;
        private int teamId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TeamId
        {
            get { return teamId_; }
            set
            {
                teamId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MapColor);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MapColor other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (X != other.X) return false;
            if (Y != other.Y) return false;
            if (TeamId != other.TeamId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (X != 0) hash ^= X.GetHashCode();
            if (Y != 0) hash ^= Y.GetHashCode();
            if (TeamId != 0) hash ^= TeamId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (X != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(X);
            }
            if (Y != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(Y);
            }
            if (TeamId != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(TeamId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (X != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
            }
            if (Y != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
            }
            if (TeamId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MapColor other)
        {
            if (other == null)
            {
                return;
            }
            if (other.X != 0)
            {
                X = other.X;
            }
            if (other.Y != 0)
            {
                Y = other.Y;
            }
            if (other.TeamId != 0)
            {
                TeamId = other.TeamId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            X = input.ReadInt32();
                            break;
                        }
                    case 16:
                        {
                            Y = input.ReadInt32();
                            break;
                        }
                    case 24:
                        {
                            TeamId = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Message2Client : pb::IMessage<Message2Client>
    {
        private static readonly pb::MessageParser<Message2Client> _parser = new pb::MessageParser<Message2Client>(() => new Message2Client());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Message2Client> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Communication.Proto.Message2ClientReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Message2Client()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Message2Client(Message2Client other) : this()
        {
            gameObjectList_ = other.gameObjectList_.Clone();
            mapColors_ = other.mapColors_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Message2Client Clone()
        {
            return new Message2Client(this);
        }

        /// <summary>Field number for the "gameObjectList" field.</summary>
        public const int GameObjectListFieldNumber = 1;
        private static readonly pbc::MapField<long, global::Communication.Proto.GameObject>.Codec _map_gameObjectList_codec
            = new pbc::MapField<long, global::Communication.Proto.GameObject>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Communication.Proto.GameObject.Parser), 10);
        private readonly pbc::MapField<long, global::Communication.Proto.GameObject> gameObjectList_ = new pbc::MapField<long, global::Communication.Proto.GameObject>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<long, global::Communication.Proto.GameObject> GameObjectList
        {
            get { return gameObjectList_; }
        }

        /// <summary>Field number for the "MapColors" field.</summary>
        public const int MapColorsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Communication.Proto.MapColor> _repeated_mapColors_codec
            = pb::FieldCodec.ForMessage(18, global::Communication.Proto.MapColor.Parser);
        private readonly pbc::RepeatedField<global::Communication.Proto.MapColor> mapColors_ = new pbc::RepeatedField<global::Communication.Proto.MapColor>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Communication.Proto.MapColor> MapColors
        {
            get { return mapColors_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Message2Client);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Message2Client other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!GameObjectList.Equals(other.GameObjectList)) return false;
            if (!mapColors_.Equals(other.mapColors_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= GameObjectList.GetHashCode();
            hash ^= mapColors_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            gameObjectList_.WriteTo(output, _map_gameObjectList_codec);
            mapColors_.WriteTo(output, _repeated_mapColors_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += gameObjectList_.CalculateSize(_map_gameObjectList_codec);
            size += mapColors_.CalculateSize(_repeated_mapColors_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Message2Client other)
        {
            if (other == null)
            {
                return;
            }
            gameObjectList_.Add(other.gameObjectList_);
            mapColors_.Add(other.mapColors_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            gameObjectList_.AddEntriesFrom(input, _map_gameObjectList_codec);
                            break;
                        }
                    case 18:
                        {
                            mapColors_.AddEntriesFrom(input, _repeated_mapColors_codec);
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code